# Curosr Rules

- Develop TypeScript, Astro, and TailwindCSS applications following provided conventions and guidelines.

## Code Style and Structure\*\*

> > > > > > > multilingual

- Write concise, technical TypeScript code using functional and declarative programming patterns.
- Avoid classes; prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- Structure files into: exported component, subcomponents, helpers, static content, and types.
- don't use any, use type instead.
- don't use abrevations, use the full word instead (e.g. `e` -> `event` )
- colors:
  - dark:
    - background: slate-950 # Fond principal
    - text: zinc-100 # Texte principal
    - textSecondary: zinc-400 # Texte secondaire
    - accent1: amber-500 # Accent 1 (UI)
    - accent2: emerald-400 # Accent 2 (UI)
    - surface: slate-800 # Surfaces
  - light:
    - background: zinc-50 # Fond principal
    - text: zinc-900 # Texte principal
    - textSecondary: zinc-500 # Texte secondaire
    - accent1: amber-600 # Accent 1 (UI)
    - accent2: emerald-600 # Accent 2 (UI)
      surface: zinc-200 # Surfaces

## Naming Conventions\*\*

- Use lowercase with dashes for directories (e.g., `components/auth-wizard`).
- Favor named exports for components.

## TypeScript Usage\*\*

- Use TypeScript for all code; prefer types over interfaces.
- Avoid enums; use maps instead.
- Use functional components with TypeScript types.

## Syntax and Formatting\*\*

> > > > > > > multilingual

- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Write declarative JSX.

## UI and Styling

- Use Tailwind for components and styling.
- Implement responsive design with Tailwind CSS using a mobile-first approach.

## Performance Optimization\*\*

> > > > > > > multilingual

- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, and implement lazy loading.
