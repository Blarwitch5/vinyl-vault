---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'gradient'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  href?: string
  type?: 'button' | 'submit' | 'reset'
  class?: string
}

const {
  variant = 'primary',
  size = 'md',
  disabled = false,
  href,
  type = 'button',
  class: className = '',
  ...rest
} = Astro.props

// Classes de base
const baseClasses =
  'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed'

// Variants
const variants = {
  primary: 'bg-emerald-600 hover:bg-emerald-700 text-white focus:ring-emerald-500',
  secondary: 'bg-neutral-600 hover:bg-neutral-700 text-white focus:ring-neutral-500',
  outline:
    'border border-emerald-600 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 focus:ring-emerald-500',
  ghost: 'text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 focus:ring-emerald-500',
  gradient: 'bg-gradient-emerald hover:bg-gradient-emerald-light text-white focus:ring-emerald-500',
}

// Tailles
const sizes = {
  sm: 'px-3 py-1.5 text-sm rounded-lg',
  md: 'px-4 py-2 text-base rounded-xl',
  lg: 'px-6 py-3 text-lg rounded-xl',
}

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`
---

{
  href ? (
    <a href={href} class={classes} {...rest}>
      <slot />
    </a>
  ) : (
    <button type={type} class={classes} disabled={disabled} {...rest}>
      <slot />
    </button>
  )
}
