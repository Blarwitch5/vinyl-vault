---
// Navbar pour la navigation principale
import { ThemeToggle } from './theme-toggle'
import NavbarSearch from './NavbarSearch.astro'
import SkeletonLoader from './SkeletonLoader.astro'
---

<nav
  class="glass dark:glass-dark border-b border-neutral-200/50 dark:border-neutral-800/50 transition-colors duration-300 relative z-50"
>
  <div class="container mx-auto px-4">
    <div class="flex items-center h-16 space-x-4">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-2">
          <span class="text-2xl">ðŸŽµ</span>
          <span class="text-xl font-bold text-neutral-900 dark:text-neutral-50">VinylVault</span>
        </a>
      </div>

      <!-- Bouton de basculement de thÃ¨me -->
      <ThemeToggle />

      <!-- Barre de recherche centrale -->
      <div class="hidden md:flex flex-1 justify-center max-w-2xl">
        <NavbarSearch />
      </div>

      <!-- Navigation avec icÃ´nes et actions -->
      <div class="flex items-center space-x-3">

        <!-- IcÃ´ne Recherche mobile -->
        <button
          id="mobile-search-toggle"
          class="md:hidden p-2 text-neutral-600 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-500 hover:bg-neutral-100 dark:hover:bg-neutral-900 rounded-xl transition-colors"
          title="Rechercher"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-scan-search-icon lucide-scan-search">
            <path d="M3 7V5a2 2 0 0 1 2-2h2"/>
            <path d="M17 3h2a2 2 0 0 1 2 2v2"/>
            <path d="M21 17v2a2 2 0 0 1-2 2h-2"/>
            <path d="M7 21H5a2 2 0 0 1-2-2v-2"/>
            <circle cx="12" cy="12" r="3"/>
            <path d="m16 16-1.9-1.9"/>
          </svg>
        </button>

        <!-- Skeleton User Menu (affichÃ© pendant le chargement) -->
        <div id="user-skeleton" class="flex items-center space-x-3">
          <SkeletonLoader type="avatar" />
          <SkeletonLoader type="text" width="w-16" height="h-4" />
        </div>

        <!-- Menu utilisateur connectÃ© -->
        <div id="user-menu" class="hidden relative">
          <button
            id="user-menu-button"
            class="flex items-center space-x-3 text-neutral-600 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-500 transition-colors"
          >
            <!-- Avatar utilisateur -->
            <div
              id="user-avatar"
              class="w-8 h-8 rounded-xl border-2 border-neutral-200 dark:border-white/10 overflow-hidden"
            >
              <img src="/default-avatar.svg" alt="Avatar" class="w-full h-full object-cover" />
            </div>
            <span id="user-name" class="text-sm font-medium"></span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>

          <!-- Dropdown menu -->
          <div
            id="user-dropdown"
            class="hidden absolute top-full mt-2 w-48 bg-white dark:bg-neutral-950 rounded-xl shadow-lg dark:shadow-neutral-900/50 z-[60] border border-neutral-200 dark:border-neutral-80 flex-col"
          >
            <div class="py-2">
              <a
                href="/profile"
                class="flex items-center space-x-3 px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                  <circle cx="12" cy="7" r="4"/>
                </svg>
                <span>Mon Profil</span>
              </a>
              <a
                href="/dashboard"
                class="flex items-center space-x-3 px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                  <path d="m16 6 4 14"/>
                  <path d="M12 6v14"/>
                  <path d="M8 8v12"/>
                  <path d="M4 4v16"/>
                </svg>
                <span>Ma Collection</span>
              </a>
              <button
                id="stats-button"
                class="flex items-center space-x-3 w-full text-left px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                  <path d="M3 3v16a2 2 0 0 0 2 2h16"/>
                  <path d="M18 17V9"/>
                  <path d="M13 17V5"/>
                  <path d="M8 17v-3"/>
                </svg>
                <span>Statistiques</span>
              </button>
              <div class="border-t border-neutral-200 dark:border-white/10 my-1"></div>
              <button
                id="logout-button"
                class="flex items-center space-x-3 w-full text-left px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                  <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
                  <polyline points="16,17 21,12 16,7"/>
                  <line x1="21" x2="9" y1="12" y2="12"/>
                </svg>
                <span>Se DÃ©connecter</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Skeleton Guest Menu (affichÃ© pendant le chargement) -->
        <div id="guest-skeleton" class="flex items-center space-x-4">
          <SkeletonLoader type="text" width="w-16" height="h-4" />
          <SkeletonLoader type="button" className="w-20" />
        </div>

        <!-- Menu non connectÃ© -->
        <div id="guest-menu" class="items-center space-x-4 hidden">
          <a
            href="/login"
            class="text-neutral-600 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-500 transition-colors"
          >
            Connexion
          </a>
          <a
            href="/register"
            class="bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 transition-colors"
          >
            Inscription
          </a>
        </div>
      </div>

      <!-- Menu mobile -->
      <div class="md:hidden">
        <button
          id="mobile-menu-toggle"
          class="text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald focus:outline-none"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
            <line x1="4" x2="20" y1="12" y2="12"/>
            <line x1="4" x2="20" y1="6" y2="6"/>
            <line x1="4" x2="20" y1="18" y2="18"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Barre de recherche mobile -->
    <div
      id="mobile-search"
      class="hidden md:hidden border-t border-neutral-200 dark:border-white/10 p-4"
    >
      <NavbarSearch />
    </div>

    <!-- Menu mobile dÃ©roulant -->
    <div id="mobile-menu" class="hidden md:hidden border-t border-neutral-200 dark:border-white/10">
      <div class="py-4 space-y-2">
        <div class="border-t border-neutral-200 dark:border-white/10 pt-2 space-y-2">
          <div class="flex items-center justify-between py-2">
            <span class="text-neutral-600 dark:text-neutral-400 text-sm">ThÃ¨me</span>
            <ThemeToggle />
          </div>

          <!-- Menu mobile utilisateur connectÃ© -->
          <div id="mobile-user-menu" class="hidden">
            <a
              href="/profile"
              class="flex items-center space-x-3 text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                <circle cx="12" cy="7" r="4"/>
              </svg>
              <span>Mon Profil</span>
            </a>
            <button
              id="mobile-logout-button"
              class="flex items-center space-x-3 text-left w-full text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
                <polyline points="16,17 21,12 16,7"/>
                <line x1="21" x2="9" y1="12" y2="12"/>
              </svg>
              <span>Se DÃ©connecter</span>
            </button>
          </div>

          <!-- Menu mobile non connectÃ© -->
          <div id="mobile-guest-menu">
            <a
              href="/login"
              class="block text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
            >
              Connexion
            </a>
            <a
              href="/register"
              class="block bg-gradient-emerald dark:bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors"
            >
              Inscription
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  import { getCurrentUser, logout } from '../lib/auth.js'
import {
smoothHide,
smoothShow,
smoothToggle,
smoothToggleBetween,
smoothToggleDropdown,
smoothToggleMobileMenu,
} from '../utils/smooth-toggle.js'

  // Configuration des animations
  const ANIMATION_DURATIONS = {
    FAST: 150,
    NORMAL: 200,
    SLOW: 250,
  } as const

  // SÃ©lecteurs d'Ã©lÃ©ments
  const SELECTORS = {
    // Menus principaux
    userMenu: 'user-menu',
    guestMenu: 'guest-menu',
    mobileUserMenu: 'mobile-user-menu',
    mobileGuestMenu: 'mobile-guest-menu',

    // Ã‰lÃ©ments utilisateur
    userName: 'user-name',
    userAvatar: 'user-avatar',
    userMenuButton: 'user-menu-button',
    userDropdown: 'user-dropdown',

    // Boutons d'action
    logoutButton: 'logout-button',
    mobileLogoutButton: 'mobile-logout-button',
    statsButton: 'stats-button',

    // Navigation
    mobileSearchToggle: 'mobile-search-toggle',
    mobileSearch: 'mobile-search',
    mobileMenuToggle: 'mobile-menu-toggle',
    mobileMenu: 'mobile-menu',

    // Skeletons
    skeletons: ['user-skeleton', 'guest-skeleton'],
  } as const

  // Gradients pour les avatars
  const AVATAR_GRADIENTS = {
    blue: 'linear-gradient(135deg, #60a5fa, #2563eb)',
    emerald: 'linear-gradient(135deg, #6ee7b7, #059669)',
    purple: 'linear-gradient(135deg, #c084fc, #9333ea)',
    red: 'linear-gradient(135deg, #f87171, #dc2626)',
    orange: 'linear-gradient(135deg, #fb923c, #ea580c)',
    pink: 'linear-gradient(135deg, #f472b6, #ec4899)',
    indigo: 'linear-gradient(135deg, #818cf8, #4f46e5)',
  } as const

  class NavbarController {
    private elements: Record<string, HTMLElement | null> = {}

    constructor() {
      this.initializeElements()
    }

    private initializeElements(): void {
      // RÃ©cupÃ©rer tous les Ã©lÃ©ments DOM
      Object.entries(SELECTORS).forEach(([key, value]) => {
        if (Array.isArray(value)) {
          // Pour les skeletons (array)
          value.forEach((id) => {
            this.elements[id] = document.getElementById(id)
          })
        } else {
          this.elements[key] = document.getElementById(value as string)
        }
      })
    }

    private hideSkeletons(): void {
      SELECTORS.skeletons.forEach((skeleton) => {
        this.elements[skeleton]?.classList.add('hidden')
      })
    }

    private setupUserState(user: any): void {
      const {
        userMenu,
        guestMenu,
        mobileUserMenu,
        mobileGuestMenu,
      } = this.elements

      // Animations des menus
      if (userMenu && guestMenu)
        smoothToggleBetween(userMenu, guestMenu, 'flex', ANIMATION_DURATIONS.NORMAL)
      if (mobileUserMenu) smoothShow(mobileUserMenu, 'flex', ANIMATION_DURATIONS.NORMAL)
      if (mobileGuestMenu) smoothHide(mobileGuestMenu, ANIMATION_DURATIONS.NORMAL)

      // Informations utilisateur
      this.updateUserInfo(user)
      this.setupUserInteractions()
    }

    private setupGuestState(): void {
      const { userMenu, guestMenu, mobileUserMenu, mobileGuestMenu } = this.elements

      if (guestMenu && userMenu)
        smoothToggleBetween(guestMenu, userMenu, 'flex', ANIMATION_DURATIONS.NORMAL)
      if (mobileUserMenu) smoothHide(mobileUserMenu, ANIMATION_DURATIONS.NORMAL)
      if (mobileGuestMenu) smoothShow(mobileGuestMenu, 'flex', ANIMATION_DURATIONS.NORMAL)
    }

    private updateUserInfo(user: any): void {
      const { userName, userAvatar } = this.elements

      // Nom d'utilisateur
      if (userName) {
        const fullName = user.name || user.email.split('@')[0]
        const displayName = fullName.length > 10 ? fullName.substring(0, 10) + '...' : fullName
        
        userName.textContent = displayName
        userName.title = fullName // Tooltip avec le nom complet
        userName.setAttribute('data-tooltip', fullName)
      }

      // Avatar
      if (userAvatar) {
        const avatar = user.avatar || '/default-avatar.svg'
        this.updateUserAvatar(avatar)
      }
    }

    private updateUserAvatar(avatar: string): void {
      const { userAvatar } = this.elements
      if (!userAvatar) return

      const avatarImg = userAvatar.querySelector('img')

      if (avatar.startsWith('/')) {
        // Avatar par dÃ©faut (fichier SVG)
        if (avatarImg) {
          avatarImg.src = avatar
          avatarImg.style.display = 'block'
        }
        userAvatar.style.background = ''
      } else {
        // Avatar colorÃ© (gradient)
        if (avatarImg) avatarImg.style.display = 'none'
        userAvatar.style.background =
          AVATAR_GRADIENTS[avatar as keyof typeof AVATAR_GRADIENTS] || AVATAR_GRADIENTS.blue
      }
    }

    private setupUserInteractions(): void {
      const { userMenuButton, userDropdown, logoutButton, mobileLogoutButton, statsButton } = this.elements

      // Dropdown utilisateur
      if (userMenuButton && userDropdown) {
        userMenuButton.addEventListener('click', (e) => {
          e.stopPropagation()
          smoothToggleDropdown(userDropdown, userMenuButton, ANIMATION_DURATIONS.FAST)
        })
      }

      // Statistiques personnelles
      if (statsButton) {
        statsButton.addEventListener('click', () => {
          // Fermer le dropdown
          if (userDropdown) smoothHide(userDropdown, ANIMATION_DURATIONS.FAST)
          
          // Ouvrir le modal des statistiques
          document.dispatchEvent(new CustomEvent('modal:personal-stats:open'))
        })
      }

      // DÃ©connexion
      const handleLogout = () => logout()
      logoutButton?.addEventListener('click', handleLogout)
      mobileLogoutButton?.addEventListener('click', handleLogout)
    }

    private setupMobileInteractions(): void {
      const { mobileMenuToggle, mobileMenu, mobileSearchToggle, mobileSearch } = this.elements

      // Menu mobile
      if (mobileMenuToggle && mobileMenu) {
        mobileMenuToggle.addEventListener('click', () => {
          smoothToggleMobileMenu(mobileMenu, undefined, ANIMATION_DURATIONS.SLOW)
          if (mobileSearch) smoothHide(mobileSearch, ANIMATION_DURATIONS.NORMAL)
        })
      }

      // Recherche mobile
    if (mobileSearchToggle && mobileSearch) {
      mobileSearchToggle.addEventListener('click', () => {
          const isVisible = smoothToggle(mobileSearch, 'flex', ANIMATION_DURATIONS.NORMAL)
          if (mobileMenu) smoothHide(mobileMenu, ANIMATION_DURATIONS.NORMAL)

          // Focus avec dÃ©lai pour l'animation
          if (isVisible) {
          const searchInput = mobileSearch.querySelector('#navbar-search') as HTMLInputElement
            setTimeout(() => searchInput?.focus(), ANIMATION_DURATIONS.SLOW)
          }
        })
      }
    }

    async initialize(): Promise<void> {
      try {
        const user = await getCurrentUser()

        if (user && this.elements.userMenu && this.elements.guestMenu && this.elements.userName) {
          this.setupUserState(user)
        } else {
          this.setupGuestState()
        }
      } catch (error) {
        console.error("Erreur lors de la vÃ©rification de l'authentification:", error)
        this.setupGuestState()
      } finally {
        this.hideSkeletons()
        this.setupMobileInteractions()
      }
    }
  }

  // Types globaux sont maintenant dÃ©finis dans src/types/window.d.ts

  // Initialisation
  document.addEventListener('DOMContentLoaded', async () => {
    const navbar = new NavbarController()
    await navbar.initialize()
  })
</script>

<style>
  /* Tooltip Ã©lÃ©gant pour le nom d'utilisateur */
  #user-name {
    position: relative;
    cursor: help;
  }

  #user-name:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #1f2937;
    color: white;
    padding: 6px 10px;
    border-radius: 6px;
    font-size: 12px;
    font-weight: 500;
    white-space: nowrap;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    margin-top: 4px;
    animation: tooltipFadeIn 0.2s ease-out;
  }

  #user-name:hover::before {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 4px solid transparent;
    border-bottom-color: #1f2937;
    z-index: 1000;
    margin-top: -1px;
    animation: tooltipFadeIn 0.2s ease-out;
  }

  @keyframes tooltipFadeIn {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(4px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }

  /* Dark mode pour le tooltip */
  .dark #user-name:hover::after {
    background: #f3f4f6;
    color: #111827;
  }

  .dark #user-name:hover::before {
    border-bottom-color: #f3f4f6;
  }
</style>
