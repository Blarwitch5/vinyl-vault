---
// Navbar pour la navigation principale
import { ThemeToggle } from './theme-toggle'
import NavbarSearch from './NavbarSearch.astro'
import SkeletonLoader from './SkeletonLoader.astro'
---

<nav
  class="glass dark:glass-dark border-b border-neutral-200/50 dark:border-neutral-800/50 transition-colors duration-300 relative z-50"
>
  <div class="container mx-auto px-4">
    <div class="flex items-center h-16 space-x-4">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-2">
          <span class="text-2xl">ðŸŽµ</span>
          <span class="text-xl font-bold text-neutral-900 dark:text-neutral-50">VinylVault</span>
        </a>
      </div>

      <!-- Barre de recherche centrale -->
      <div class="hidden md:flex flex-1 justify-center max-w-2xl">
        <NavbarSearch />
      </div>

      <!-- Navigation avec icÃ´nes et actions -->
      <div class="flex items-center space-x-3">
        <!-- Skeleton Collection Link (affichÃ© pendant le chargement) -->
        <div id="collection-skeleton" class="hidden">
          <SkeletonLoader type="collection-link" />
        </div>

        <!-- Lien Collection avec icÃ´ne et texte (visible seulement si connectÃ©) -->
        <a
          id="collection-link"
          href="/dashboard"
          class="hidden flex items-center space-x-2 px-3 py-2 text-neutral-500 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-400 hover:bg-neutral-100 dark:hover:bg-neutral-800 rounded-xl transition-colors"
          title="Ma Collection"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
            ></path>
          </svg>
          <span class="text-sm font-medium hidden lg:inline">Ma Collection</span>
        </a>

        <!-- IcÃ´ne Recherche mobile -->
        <button
          id="mobile-search-toggle"
          class="md:hidden p-2 text-neutral-600 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-500 hover:bg-neutral-100 dark:hover:bg-neutral-900 rounded-xl transition-colors"
          title="Rechercher"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </button>

        <ThemeToggle />

        <!-- Skeleton User Menu (affichÃ© pendant le chargement) -->
        <div id="user-skeleton" class="flex items-center space-x-3">
          <SkeletonLoader type="avatar" />
          <SkeletonLoader type="text" width="w-16" height="h-4" />
        </div>

        <!-- Menu utilisateur connectÃ© -->
        <div id="user-menu" class="hidden relative">
          <button
            id="user-menu-button"
            class="flex items-center space-x-3 text-neutral-600 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-500 transition-colors"
          >
            <!-- Avatar utilisateur -->
            <div
              id="user-avatar"
              class="w-8 h-8 rounded-xl border-2 border-neutral-200 dark:border-white/10 overflow-hidden"
            >
              <img src="/default-avatar.svg" alt="Avatar" class="w-full h-full object-cover" />
            </div>
            <span id="user-name" class="text-sm font-medium"></span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>

          <!-- Dropdown menu -->
          <div
            id="user-dropdown"
            class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-neutral-950 rounded-xl shadow-md dark:shadow-neutral-900/50 z-[60]"
          >
            <div class="py-2">
              <a
                href="/profile"
                class="flex items-center space-x-3 px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span>Mon Profil</span>
              </a>
              <a
                href="/dashboard"
                class="flex items-center space-x-3 px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                  ></path>
                </svg>
                <span>Ma Collection</span>
              </a>
              <div class="border-t border-neutral-200 dark:border-white/10 my-1"></div>
              <button
                id="logout-button"
                class="flex items-center space-x-3 w-full text-left px-4 py-2 text-sm text-neutral-600 dark:text-neutral-400 hover:bg-neutral-100 dark:hover:bg-neutral-900 transition-colors"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                  ></path>
                </svg>
                <span>Se DÃ©connecter</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Skeleton Guest Menu (affichÃ© pendant le chargement) -->
        <div id="guest-skeleton" class="flex items-center space-x-4">
          <SkeletonLoader type="text" width="w-16" height="h-4" />
          <SkeletonLoader type="button" className="w-20" />
        </div>

        <!-- Menu non connectÃ© -->
        <div id="guest-menu" class="hidden flex items-center space-x-4">
          <a
            href="/login"
            class="text-neutral-600 dark:text-neutral-400 hover:text-emerald-500 dark:hover:text-emerald-500 transition-colors"
          >
            Connexion
          </a>
          <a
            href="/register"
            class="bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 transition-colors"
          >
            Inscription
          </a>
        </div>
      </div>

      <!-- Menu mobile -->
      <div class="md:hidden">
        <button
          id="mobile-menu-toggle"
          class="text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald focus:outline-none"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Barre de recherche mobile -->
    <div
      id="mobile-search"
      class="hidden md:hidden border-t border-neutral-200 dark:border-white/10 p-4"
    >
      <NavbarSearch />
    </div>

    <!-- Menu mobile dÃ©roulant -->
    <div id="mobile-menu" class="hidden md:hidden border-t border-neutral-200 dark:border-white/10">
      <div class="py-4 space-y-2">
        <a
          id="mobile-collection-link"
          href="/dashboard"
          class="hidden flex items-center space-x-3 text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
            ></path>
          </svg>
          <span>Ma Collection</span>
        </a>
        <div class="border-t border-neutral-200 dark:border-white/10 pt-2 space-y-2">
          <div class="flex items-center justify-between py-2">
            <span class="text-neutral-600 dark:text-neutral-400 text-sm">ThÃ¨me</span>
            <ThemeToggle />
          </div>

          <!-- Menu mobile utilisateur connectÃ© -->
          <div id="mobile-user-menu" class="hidden">
            <a
              href="/profile"
              class="flex items-center space-x-3 text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              <span>Mon Profil</span>
            </a>
            <button
              id="mobile-logout-button"
              class="flex items-center space-x-3 text-left w-full text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                ></path>
              </svg>
              <span>Se DÃ©connecter</span>
            </button>
          </div>

          <!-- Menu mobile non connectÃ© -->
          <div id="mobile-guest-menu">
            <a
              href="/login"
              class="block text-neutral-600 dark:text-neutral-400 hover:text-gradient-emerald dark:hover:text-gradient-emerald py-2"
            >
              Connexion
            </a>
            <a
              href="/register"
              class="block bg-gradient-emerald dark:bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors"
            >
              Inscription
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  import { getCurrentUser, logout } from '../lib/auth.js'

  // Gestion de l'Ã©tat d'authentification
  document.addEventListener('DOMContentLoaded', async () => {
    // Elements de l'interface
    const userMenu = document.getElementById('user-menu')
    const guestMenu = document.getElementById('guest-menu')
    const mobileUserMenu = document.getElementById('mobile-user-menu')
    const mobileGuestMenu = document.getElementById('mobile-guest-menu')
    const userNameSpan = document.getElementById('user-name')
    const userAvatar = document.getElementById('user-avatar')
    const userMenuButton = document.getElementById('user-menu-button')
    const userDropdown = document.getElementById('user-dropdown')
    const logoutButton = document.getElementById('logout-button')
    const mobileLogoutButton = document.getElementById('mobile-logout-button')

    // Nouveaux Ã©lÃ©ments de navigation
    const collectionLink = document.getElementById('collection-link')
    const mobileCollectionLink = document.getElementById('mobile-collection-link')
    const mobileSearchToggle = document.getElementById('mobile-search-toggle')
    const mobileSearch = document.getElementById('mobile-search')

    // Ã‰lÃ©ments skeleton
    const collectionSkeleton = document.getElementById('collection-skeleton')
    const userSkeleton = document.getElementById('user-skeleton')
    const guestSkeleton = document.getElementById('guest-skeleton')

    // VÃ©rifier l'Ã©tat de connexion
    try {
      const user = await getCurrentUser()

      if (user && userMenu && guestMenu && userNameSpan) {
        // Utilisateur connectÃ©
        userMenu.classList.remove('hidden')
        guestMenu.classList.add('hidden')
        mobileUserMenu?.classList.remove('hidden')
        mobileGuestMenu?.classList.add('hidden')

        // Afficher les liens collection pour utilisateur connectÃ©
        collectionLink?.classList.remove('hidden')
        mobileCollectionLink?.classList.remove('hidden')

        // Masquer les skeletons et afficher le contenu rÃ©el
        userSkeleton?.classList.add('hidden')
        guestSkeleton?.classList.add('hidden')
        collectionSkeleton?.classList.add('hidden')

        // Afficher le nom de l'utilisateur
        userNameSpan.textContent = user.name || user.email.split('@')[0]

        // Afficher l'avatar de l'utilisateur
        if (userAvatar) {
          const avatar = (user as any).avatar || '/default-avatar.svg'
          updateUserAvatar(avatar)
        }

        // Gestion du dropdown
        if (userMenuButton && userDropdown) {
          userMenuButton.addEventListener('click', (e) => {
            e.stopPropagation()
            userDropdown.classList.toggle('hidden')
          })

          // Fermer le dropdown en cliquant ailleurs
          document.addEventListener('click', () => {
            userDropdown.classList.add('hidden')
          })
        }

        // Gestion de la dÃ©connexion
        const handleLogout = () => {
          logout()
        }

        logoutButton?.addEventListener('click', handleLogout)
        mobileLogoutButton?.addEventListener('click', handleLogout)
      } else {
        // Utilisateur non connectÃ©
        userMenu?.classList.add('hidden')
        guestMenu?.classList.remove('hidden')
        mobileUserMenu?.classList.add('hidden')
        mobileGuestMenu?.classList.remove('hidden')

        // Masquer les skeletons et afficher le contenu rÃ©el
        userSkeleton?.classList.add('hidden')
        guestSkeleton?.classList.add('hidden')
        collectionSkeleton?.classList.add('hidden')
      }
    } catch (error) {
      console.error("Erreur lors de la vÃ©rification de l'authentification:", error)
      // En cas d'erreur, afficher le menu non connectÃ©
      userMenu?.classList.add('hidden')
      guestMenu?.classList.remove('hidden')
      mobileUserMenu?.classList.add('hidden')
      mobileGuestMenu?.classList.remove('hidden')

      // Masquer les skeletons en cas d'erreur
      userSkeleton?.classList.add('hidden')
      guestSkeleton?.classList.add('hidden')
      collectionSkeleton?.classList.add('hidden')
    }

    // Fonction pour mettre Ã  jour l'avatar utilisateur
    function updateUserAvatar(avatar: string) {
      if (!userAvatar) return

      const avatarImg = userAvatar.querySelector('img')

      if (avatar.startsWith('/')) {
        // Avatar par dÃ©faut (fichier SVG)
        if (avatarImg) {
          avatarImg.src = avatar
          avatarImg.style.display = 'block'
        }
        userAvatar.style.background = ''
      } else {
        // Avatar colorÃ© (gradient)
        if (avatarImg) {
          avatarImg.style.display = 'none'
        }
        userAvatar.style.background = getGradientForColor(avatar)
      }
    }

    // Fonction pour obtenir le gradient selon la couleur
    function getGradientForColor(color: string): string {
      const gradients: { [key: string]: string } = {
        blue: 'linear-gradient(135deg, #60a5fa, #2563eb)',
        emerald: 'linear-gradient(135deg, #6ee7b7, #059669)',
        purple: 'linear-gradient(135deg, #c084fc, #9333ea)',
        red: 'linear-gradient(135deg, #f87171, #dc2626)',
        orange: 'linear-gradient(135deg, #fb923c, #ea580c)',
        pink: 'linear-gradient(135deg, #f472b6, #ec4899)',
        indigo: 'linear-gradient(135deg, #818cf8, #4f46e5)',
      }
      return gradients[color] || gradients.blue
    }

    // Gestion du menu mobile
    const toggle = document.getElementById('mobile-menu-toggle')
    const menu = document.getElementById('mobile-menu')

    if (toggle && menu) {
      toggle.addEventListener('click', () => {
        menu.classList.toggle('hidden')
        // Fermer la recherche mobile si ouverte
        mobileSearch?.classList.add('hidden')
      })
    }

    // Gestion de la recherche mobile
    if (mobileSearchToggle && mobileSearch) {
      mobileSearchToggle.addEventListener('click', () => {
        mobileSearch.classList.toggle('hidden')
        // Fermer le menu mobile si ouvert
        menu?.classList.add('hidden')

        // Focus sur le champ de recherche
        if (!mobileSearch.classList.contains('hidden')) {
          const searchInput = mobileSearch.querySelector('#navbar-search') as HTMLInputElement
          setTimeout(() => searchInput?.focus(), 100)
        }
      })
    }
  })
</script>
