---
export interface Props {
  vinyl: {
    id: string
    title: string
    artist: string
    year?: number
    format?: string
    coverImage?: string
    condition?: string
    price?: number
    note?: string
    discogsId?: string
    discogsUrl?: string
  }
  showActions?: boolean
  isInCollection?: boolean
}

const { vinyl, showActions = false, isInCollection = false } = Astro.props
const defaultCover = '/default-vinyl-cover.svg'
---

<div
  class="vinyl-card-container glass dark:glass-dark dark:bg-neutral-950 dark:bg-gradient-emerald-subtle rounded-xl shadow-md dark:shadow-white-md overflow-hidden hover:shadow-lg dark:hover:shadow-white-lg transition-all duration-300 hover:-translate-y-1"
  data-discogs-id={vinyl.discogsId}
  data-discogs-url={vinyl.discogsUrl}
>
  <!-- Image de couverture -->
  <div class="aspect-square relative glass dark:glass-dark">
    <img
      src={vinyl.coverImage || defaultCover}
      alt={`Couverture de ${vinyl.title}`}
      class="w-full h-full object-cover"
      loading="lazy"
      onerror="this.src='/default-vinyl-cover.svg'"
    />
    {
      vinyl.condition && (
        <div class="absolute top-2 right-2">
          <span class="bg-black bg-opacity-70 text-white text-xs px-2 py-1 rounded-full">
            {vinyl.condition}
          </span>
        </div>
      )
    }
  </div>

  <!-- Informations du vinyle -->
  <div class="p-4">
    <h3
      class="font-semibold text-lg text-neutral-900 dark:text-neutral-50 mb-1 line-clamp-2"
      data-vinyl-title
    >
      {vinyl.title}
    </h3>

    <p class="text-neutral-600 dark:text-neutral-400 mb-2 line-clamp-1" data-vinyl-artist>
      {vinyl.artist}
    </p>

    <div
      class="flex items-center justify-between text-sm text-neutral-600 dark:text-neutral-400 mb-3"
    >
      {
        vinyl.year && (
          <span data-vinyl-year class="font-mono">
            {vinyl.year}
          </span>
        )
      }
      {vinyl.format && <span>{vinyl.format}</span>}
    </div>

    {
      vinyl.price && (
        <div class="text-lg font-bold text-emerald-600 dark:text-gradient-emerald mb-3 font-mono">
          {vinyl.price.toFixed(2)} €
        </div>
      )
    }

    {
      vinyl.note && (
        <p class="text-sm text-neutral-600 dark:text-neutral-400 italic mb-3 line-clamp-2">
          "{vinyl.note}"
        </p>
      )
    }

    {
      showActions && (
        <div class="flex gap-2">
          {!isInCollection ? (
            <button
              class="flex-1 bg-gradient-emerald text-white py-2 px-4 rounded-lg hover:bg-gradient-emerald/80 transition-colors text-sm font-medium"
              data-vinyl-id={vinyl.id}
              data-action="add-to-collection"
            >
              Ajouter à ma collection
            </button>
          ) : (
            <button
              class="w-full bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors text-sm font-medium"
              data-vinyl-id={vinyl.id}
              data-action="remove"
            >
              Supprimer de la collection
            </button>
          )}
        </div>
      )
    }
  </div>
</div>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Gestion des actions sur les cartes de vinyles
  document.addEventListener('DOMContentLoaded', () => {
    const actionButtons = document.querySelectorAll('[data-action]')

    actionButtons.forEach((button) => {
      button.addEventListener('click', async (e) => {
        e.preventDefault()
        const target = e.target as HTMLButtonElement
        const action = target.dataset.action
        const vinylId = target.dataset.vinylId

        if (!action || !vinylId) return

        try {
          switch (action) {
            case 'add-to-collection':
              await addToCollection(vinylId)
              break
            case 'remove':
              // Récupérer les informations du vinyle depuis la carte
              const card = target.closest('.vinyl-card-container')
              if (!card) return

              const vinyl = {
                id: vinylId,
                title: card.querySelector('[data-vinyl-title]')?.textContent || 'Vinyle inconnu',
                artist: card.querySelector('[data-vinyl-artist]')?.textContent || 'Artiste inconnu',
                year: card.querySelector('[data-vinyl-year]')?.textContent || '',
                format:
                  Array.from(card.querySelectorAll('span')).find(
                    (span) =>
                      span.textContent?.includes('LP') ||
                      span.textContent?.includes('EP') ||
                      span.textContent?.includes('Single')
                  )?.textContent || '',
                coverImage: card.querySelector('img')?.src || '/default-vinyl-cover.svg',
              }

              // Ouvrir la modal de confirmation
              if (typeof (window as any).openDeleteVinylModal === 'function') {
                ;(window as any).openDeleteVinylModal(vinyl)
              } else {
                console.error('Modal de suppression non disponible')
                // Fallback avec confirm
                if (
                  confirm(
                    `Êtes-vous sûr de vouloir supprimer "${vinyl.title}" de votre collection ?`
                  )
                ) {
                  await removeFromCollection(vinylId)
                }
              }
              break
          }
        } catch (error) {
          console.error("Erreur lors de l'action:", error)
          alert('Une erreur est survenue. Veuillez réessayer.')
        }
      })
    })
  })

  async function addToCollection(vinylId: string) {
    const response = await fetch('/api/collections/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ vinylId }),
    })

    if (response.ok) {
      location.reload() // Recharger la page pour voir les changements
    } else {
      throw new Error("Échec de l'ajout à la collection")
    }
  }

  async function removeFromCollection(vinylId: string) {
    if (!confirm('Êtes-vous sûr de vouloir supprimer ce vinyle de votre collection ?')) {
      return
    }

    const response = await fetch('/api/collections/remove', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ vinylId }),
    })

    if (response.ok) {
      location.reload() // Recharger la page pour voir les changements
    } else {
      throw new Error('Échec de la suppression de la collection')
    }
  }
</script>
