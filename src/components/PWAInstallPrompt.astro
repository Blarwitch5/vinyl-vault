---
// Composant PWA pour l'invite d'installation et les notifications de mise à jour
---

<div id="pwa-install-prompt" class="hidden fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-80 z-50">
  <div class="glass dark:glass-dark rounded-xl p-4 shadow-lg border border-neutral-200 dark:border-neutral-800">
    <div class="flex items-start space-x-3">
      <!-- Icône PWA -->
      <div class="flex-shrink-0">
        <div class="w-12 h-12 bg-gradient-emerald rounded-xl flex items-center justify-center">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
          </svg>
        </div>
      </div>
      
      <!-- Contenu -->
      <div class="flex-1 min-w-0">
        <h3 class="text-sm font-semibold text-neutral-900 dark:text-neutral-50">
          Installer VinylVault
        </h3>
        <p class="text-xs text-neutral-600 dark:text-neutral-400 mt-1">
          Ajoutez VinylVault à votre écran d'accueil pour un accès rapide et une expérience optimale.
        </p>
        
        <!-- Actions -->
        <div class="flex space-x-2 mt-3">
          <button
            id="pwa-install-btn"
            class="flex-1 bg-gradient-emerald text-white text-xs font-medium px-3 py-2 rounded-lg hover:bg-gradient-emerald/80 transition-colors"
          >
            Installer
          </button>
          <button
            id="pwa-dismiss-btn"
            class="px-3 py-2 text-xs text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50 transition-colors"
          >
            Plus tard
          </button>
        </div>
      </div>
      
      <!-- Bouton fermer -->
      <button
        id="pwa-close-btn"
        class="flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Notification de mise à jour -->
<div id="pwa-update-notification" class="hidden fixed top-4 right-4 z-50">
  <div class="glass dark:glass-dark rounded-xl p-4 shadow-lg border border-neutral-200 dark:border-neutral-800 max-w-sm">
    <div class="flex items-start space-x-3">
      <div class="flex-shrink-0">
        <svg class="w-5 h-5 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
      </div>
      <div class="flex-1">
        <h3 class="text-sm font-semibold text-neutral-900 dark:text-neutral-50">
          Mise à jour disponible
        </h3>
        <p class="text-xs text-neutral-600 dark:text-neutral-400 mt-1">
          Une nouvelle version de VinylVault est disponible.
        </p>
        <div class="flex space-x-2 mt-3">
          <button
            id="pwa-update-btn"
            class="bg-gradient-emerald text-white text-xs font-medium px-3 py-2 rounded-lg hover:bg-gradient-emerald/80 transition-colors"
          >
            Mettre à jour
          </button>
          <button
            id="pwa-update-dismiss-btn"
            class="text-xs text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50 transition-colors"
          >
            Plus tard
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { useRegisterSW } from 'virtual:pwa-register/react';

  const {
    needRefresh: [needRefresh, setNeedRefresh],
    updateServiceWorker,
  } = useRegisterSW({
    onRegistered(r) {
      console.log('SW Registered: ' + r)
    },
    onRegisterError(error) {
      console.log('SW registration error', error)
    },
  })

  class PWAManager {
    private deferredPrompt: any = null;
    private installPrompt: HTMLElement | null = null;
    private updateNotification: HTMLElement | null = null;
    private installBtn: HTMLElement | null = null;
    private dismissBtn: HTMLElement | null = null;
    private closeBtn: HTMLElement | null = null;
    private updateBtn: HTMLElement | null = null;
    private updateDismissBtn: HTMLElement | null = null;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.checkInstallPrompt();
    }

    private initializeElements(): void {
      this.installPrompt = document.getElementById('pwa-install-prompt');
      this.updateNotification = document.getElementById('pwa-update-notification');
      this.installBtn = document.getElementById('pwa-install-btn');
      this.dismissBtn = document.getElementById('pwa-dismiss-btn');
      this.closeBtn = document.getElementById('pwa-close-btn');
      this.updateBtn = document.getElementById('pwa-update-btn');
      this.updateDismissBtn = document.getElementById('pwa-update-dismiss-btn');
    }

    private setupEventListeners(): void {
      // Installation
      this.installBtn?.addEventListener('click', () => this.installApp());
      this.dismissBtn?.addEventListener('click', () => this.dismissInstallPrompt());
      this.closeBtn?.addEventListener('click', () => this.dismissInstallPrompt());

      // Mise à jour
      this.updateBtn?.addEventListener('click', () => this.updateApp());
      this.updateDismissBtn?.addEventListener('click', () => this.dismissUpdateNotification());

      // Événements PWA
      window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        this.deferredPrompt = e;
        this.showInstallPrompt();
      });

      window.addEventListener('appinstalled', () => {
        console.log('PWA installée avec succès');
        this.hideInstallPrompt();
        this.deferredPrompt = null;
      });
    }

    private checkInstallPrompt(): void {
      // Vérifier si l'app est déjà installée
      if (window.matchMedia('(display-mode: standalone)').matches) {
        return;
      }

      // Vérifier si l'utilisateur a déjà refusé
      const dismissed = localStorage.getItem('pwa-install-dismissed');
      if (dismissed) {
        const dismissTime = parseInt(dismissed);
        const now = Date.now();
        // Réafficher après 7 jours
        if (now - dismissTime < 7 * 24 * 60 * 60 * 1000) {
          return;
        }
      }

      // Vérifier si l'utilisateur a visité plusieurs fois
      const visitCount = parseInt(localStorage.getItem('pwa-visit-count') || '0');
      localStorage.setItem('pwa-visit-count', (visitCount + 1).toString());
      
      if (visitCount >= 2) {
        this.showInstallPrompt();
      }
    }

    private showInstallPrompt(): void {
      if (this.installPrompt) {
        this.installPrompt.classList.remove('hidden');
      }
    }

    private hideInstallPrompt(): void {
      if (this.installPrompt) {
        this.installPrompt.classList.add('hidden');
      }
    }

    private showUpdateNotification(): void {
      if (this.updateNotification) {
        this.updateNotification.classList.remove('hidden');
      }
    }

    private hideUpdateNotification(): void {
      if (this.updateNotification) {
        this.updateNotification.classList.add('hidden');
      }
    }

    private async installApp(): Promise<void> {
      if (!this.deferredPrompt) {
        return;
      }

      try {
        this.deferredPrompt.prompt();
        const { outcome } = await this.deferredPrompt.userChoice;
        
        if (outcome === 'accepted') {
          console.log('Utilisateur a accepté l\'installation PWA');
        } else {
          console.log('Utilisateur a refusé l\'installation PWA');
        }
        
        this.deferredPrompt = null;
        this.hideInstallPrompt();
      } catch (error) {
        console.error('Erreur lors de l\'installation PWA:', error);
      }
    }

    private dismissInstallPrompt(): void {
      localStorage.setItem('pwa-install-dismissed', Date.now().toString());
      this.hideInstallPrompt();
    }

    private async updateApp(): Promise<void> {
      updateServiceWorker(true);
      this.hideUpdateNotification();
    }

    private dismissUpdateNotification(): void {
      this.hideUpdateNotification();
    }
  }

  // Initialiser le gestionnaire PWA
  document.addEventListener('DOMContentLoaded', () => {
    new PWAManager();
    
    // Afficher la notification de mise à jour si nécessaire
    if (needRefresh) {
      const updateNotification = document.getElementById('pwa-update-notification');
      if (updateNotification) {
        updateNotification.classList.remove('hidden');
      }
    }
  });
</script>

<style>
  /* Amélioration mobile */
  @media (max-width: 768px) {
    #pwa-install-prompt {
      margin: 1rem;
    }
  }
</style>
