---
export interface Props {
  vinyl: {
    id: string
    title: string
    artist: string
    year?: number
    format?: string
    coverImage?: string
    condition?: string
    price?: number
    note?: string
    discogsId?: string
    discogsUrl?: string
  }
  showActions?: boolean
  showViewOnly?: boolean
  isInCollection?: boolean
}

const { vinyl, showActions = false, showViewOnly = false } = Astro.props
const defaultCover = '/default-vinyl-cover.svg'
---

<!-- Pre-fetch de la page de détail du vinyle -->
<link rel="prefetch" href={`/vinyl/${vinyl.id}`} />

<div
  class="vinyl-card-compact glass dark:glass-dark dark:bg-neutral-950 dark:bg-gradient-emerald-subtle rounded-lg shadow-sm dark:shadow-white overflow-hidden hover:shadow-md dark:hover:shadow-white-md transition-all duration-300 hover:scale-105 hover:-translate-y-1 group"
  data-discogs-id={vinyl.discogsId}
  data-discogs-url={vinyl.discogsUrl}
>
  <!-- Image de couverture -->
  <div class="aspect-square relative glass dark:glass-dark">
    <img
      src={vinyl.coverImage || defaultCover}
      alt={`Couverture de ${vinyl.title}`}
      class="w-full h-full object-cover"
      loading="lazy"
      onerror="this.src='/default-vinyl-cover.svg'"
    />
    {
      vinyl.condition && (
        <div class="absolute top-1 right-1">
          <span class="bg-black bg-opacity-70 text-white text-xs px-1.5 py-0.5 rounded text-[10px] leading-none">
            {vinyl.condition}
          </span>
        </div>
      )
    }
    <!-- Overlay avec actions au hover -->
    {
      (showActions || showViewOnly) && (
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
          <div class="flex space-x-2">
            <a
              href={`/vinyl/${vinyl.id}`}
              class="bg-gradient-emerald hover:bg-gradient-emerald/80 text-white p-2 rounded-full transition-colors shadow-lg"
              title="Voir les détails"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                />
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                />
              </svg>
            </a>
            {showActions && (
              <button
                class="bg-red-500 hover:bg-red-600 hover:bg-opacity-90 text-white p-2 rounded-full transition-colors shadow-lg"
                title="Supprimer de la collection"
                data-vinyl-id={vinyl.id || ''}
                data-vinyl-title={vinyl.title || ''}
                data-vinyl-artist={vinyl.artist || ''}
                data-vinyl-year={vinyl.year || ''}
                data-vinyl-format={vinyl.format || ''}
                data-vinyl-condition={vinyl.condition || ''}
                data-vinyl-price={vinyl.price || 0}
                data-vinyl-cover={vinyl.coverImage || '/default-vinyl-cover.svg'}
                data-action="delete"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                  />
                </svg>
              </button>
            )}
          </div>
        </div>
      )
    }
  </div>

  <!-- Informations du vinyle -->
  <div class="p-2 sm:p-3">
    <!-- Titre -->
    <h3
      class="font-medium text-neutral-900 dark:text-neutral-50 text-sm sm:text-base line-clamp-2 mb-1"
    >
      {vinyl.title}
    </h3>

    <!-- Artiste -->
    <p class="text-neutral-600 dark:text-neutral-400 text-xs sm:text-sm line-clamp-1 mb-2">
      {vinyl.artist}
    </p>

    <!-- Détails -->
    <div class="flex items-center justify-between text-xs text-neutral-500 dark:text-neutral-500">
      <div class="flex items-center space-x-2">
        {
          vinyl.year && (
            <span class="bg-neutral-100 dark:bg-neutral-800 px-1.5 py-0.5 rounded text-[10px]">
              {vinyl.year}
            </span>
          )
        }
        {
          vinyl.format && (
            <span class="bg-neutral-100 dark:bg-neutral-800 px-1.5 py-0.5 rounded text-[10px]">
              {vinyl.format}
            </span>
          )
        }
      </div>
      {
        vinyl.price && (
          <span class="font-medium text-emerald-600 dark:text-emerald-400">
            {vinyl.price.toFixed(0)}€
          </span>
        )
      }
    </div>
  </div>
</div>

<style>
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
</style>

<script>
  // Gestion des actions sur les cartes compactes de vinyles
  document.addEventListener('DOMContentLoaded', () => {
    const actionButtons = document.querySelectorAll('[data-action="delete"]')

    actionButtons.forEach((button) => {
      button.addEventListener('click', async (e) => {
        e.preventDefault()
        e.stopPropagation()

        const target = e.target as HTMLButtonElement
        const vinylId = target.dataset.vinylId

        if (!vinylId) return

        // Récupérer les informations du vinyle depuis les attributs data-*
        const vinyl = {
          id: vinylId,
          title: target.dataset.vinylTitle || 'Titre inconnu',
          artist: target.dataset.vinylArtist || 'Artiste inconnu',
          year: target.dataset.vinylYear || '',
          format: target.dataset.vinylFormat || '',
          condition: target.dataset.vinylCondition || '',
          price: parseFloat(target.dataset.vinylPrice || '0'),
          coverImage: target.dataset.vinylCover || '/default-vinyl-cover.svg',
        }

        // Ouvrir la modal de confirmation
        const openDeleteModal = (window as unknown as Record<string, unknown>)
          .openDeleteVinylModal as
          | ((vinyl: {
              id: string
              title: string
              artist: string
              year: string
              format: string
              condition: string
              price: number
              coverImage: string
            }) => void)
          | undefined

        if (typeof openDeleteModal === 'function') {
          openDeleteModal(vinyl)
        } else {
          // Fallback avec confirm
          if (
            confirm(`Êtes-vous sûr de vouloir supprimer "${vinyl.title}" de votre collection ?`)
          ) {
            await deleteVinyl(vinylId)
          }
        }
      })
    })
  })

  async function deleteVinyl(vinylId: string) {
    try {
      const response = await fetch('/api/collections/remove', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ vinylId }),
      })

      const data = await response.json()

      if (data.success) {
        // Recharger la page pour voir les changements
        window.location.reload()
      } else {
        alert('Erreur lors de la suppression : ' + (data.error || 'Erreur inconnue'))
      }
    } catch {
      alert('Erreur de connexion')
    }
  }
</script>
