---
// Modal d'édition de collection
---

<div
  id="edit-collection-modal"
  class="fixed inset-0 bg-black/70 backdrop-blur-sm items-center justify-center z-50 hidden"
>
  <div
    class="bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-700 rounded-2xl p-6 w-full max-w-md mx-4 shadow-2xl"
  >
    <!-- Header -->
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-xl font-bold text-neutral-900 dark:text-neutral-50">Modifier la collection</h2>
      <button
        id="close-edit-collection-modal"
        class="text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50 transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M18 6 6 18"></path>
        </svg>
      </button>
    </div>

    <!-- Contenu -->
    <div class="mb-6">
      <div class="flex items-center space-x-3 mb-4">
        <div
          class="w-12 h-12 bg-emerald-100 dark:bg-emerald-900/20 rounded-full flex items-center justify-center"
        >
          <svg
            class="w-6 h-6 text-emerald-600 dark:text-emerald-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
            />
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z"
            />
          </svg>
        </div>
        <div>
          <h3 class="font-semibold text-neutral-900 dark:text-neutral-50">Informations de la collection</h3>
          <p class="text-sm text-neutral-600 dark:text-neutral-400">
            Modifiez les détails de votre collection
          </p>
        </div>
      </div>

      <!-- Formulaire -->
      <div class="space-y-4">
        <div>
          <label for="edit-collection-name" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
            Nom de la collection *
          </label>
          <input
            type="text"
            id="edit-collection-name"
            class="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 dark:bg-neutral-800 dark:text-neutral-50"
            placeholder="Nom de la collection"
            maxlength="100"
            required
          />
        </div>

        <div>
          <label for="edit-collection-description" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
            Description
          </label>
          <textarea
            id="edit-collection-description"
            rows="3"
            class="w-full px-3 py-2 border border-neutral-300 dark:border-neutral-600 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 dark:bg-neutral-800 dark:text-neutral-50 resize-none"
            placeholder="Description de la collection (optionnelle)"
            maxlength="500"
          ></textarea>
        </div>

        <div>
          <label class="flex items-center space-x-2">
            <input
              type="checkbox"
              id="edit-collection-public"
              class="w-4 h-4 text-emerald-600 border-neutral-300 rounded focus:ring-emerald-500 dark:border-neutral-600 dark:bg-neutral-800"
            />
            <span class="text-sm font-medium text-neutral-700 dark:text-neutral-300">
              Collection publique
            </span>
          </label>
          <p class="text-xs text-neutral-500 dark:text-neutral-400 mt-1">
            Les collections publiques peuvent être partagées avec d'autres utilisateurs
          </p>
        </div>
      </div>
    </div>

    <!-- Erreur -->
    <div
      id="edit-collection-error"
      class="bg-red-50 dark:bg-red-900/10 border border-red-200 dark:border-red-800 rounded-lg p-3 mb-4 hidden"
    >
      <p id="edit-collection-error-message" class="text-red-800 dark:text-red-200 text-sm"></p>
    </div>

    <!-- Actions -->
    <div class="flex space-x-3">
      <button
        id="cancel-edit-collection"
        class="flex-1 bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 py-2 px-4 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
      >
        Annuler
      </button>
      <button
        id="save-edit-collection"
        class="flex-1 bg-emerald-600 text-white py-2 px-4 rounded-lg hover:bg-emerald-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <span id="save-collection-text">Enregistrer</span>
        <span id="save-collection-loading" class="hidden">Enregistrement...</span>
      </button>
    </div>
  </div>
</div>

<script>
  let currentCollectionId: string | null = null

  // Éléments DOM
  const modal = document.getElementById('edit-collection-modal')
  const closeBtn = document.getElementById('close-edit-collection-modal')
  const cancelBtn = document.getElementById('cancel-edit-collection')
  const saveBtn = document.getElementById('save-edit-collection')
  const errorDiv = document.getElementById('edit-collection-error')
  const errorMessage = document.getElementById('edit-collection-error-message')
  const saveText = document.getElementById('save-collection-text')
  const saveLoading = document.getElementById('save-collection-loading')

  // Champs du formulaire
  const nameInput = document.getElementById('edit-collection-name') as HTMLInputElement
  const descriptionInput = document.getElementById('edit-collection-description') as HTMLTextAreaElement
  const publicCheckbox = document.getElementById('edit-collection-public') as HTMLInputElement

  // Fonction pour ouvrir le modal
  function openEditCollectionModal(collection: {
    id: string
    name: string
    description?: string
    isPublic?: boolean
  }) {
    currentCollectionId = collection.id

    // Remplir le formulaire
    if (nameInput) nameInput.value = collection.name
    if (descriptionInput) descriptionInput.value = collection.description || ''
    if (publicCheckbox) publicCheckbox.checked = collection.isPublic || false

    // Réinitialiser l'état
    hideError()
    setSaveButtonState(false)

    // Afficher le modal
    if (modal) {
      document.body.style.overflow = 'hidden'
      modal.classList.remove('hidden')
      modal.classList.add('flex')
      
      // Focus sur le premier champ
      setTimeout(() => nameInput?.focus(), 100)
    }
  }

  // Fonction pour fermer le modal
  function closeEditCollectionModal() {
    if (modal) {
      modal.classList.add('hidden')
      modal.classList.remove('flex')
      document.body.style.overflow = ''
    }
    currentCollectionId = null
  }

  // Fonction pour définir l'état du bouton
  function setSaveButtonState(isLoading: boolean) {
    if (saveBtn) {
      ;(saveBtn as HTMLButtonElement).disabled = isLoading
    }
    if (saveText) saveText.classList.toggle('hidden', isLoading)
    if (saveLoading) saveLoading.classList.toggle('hidden', !isLoading)
  }

  // Fonction pour afficher une erreur
  function showError(message: string) {
    if (errorMessage) {
      errorMessage.textContent = message
    }
    errorDiv?.classList.remove('hidden')
  }

  // Fonction pour masquer l'erreur
  function hideError() {
    errorDiv?.classList.add('hidden')
  }

  // Valider le formulaire
  function validateForm(): boolean {
    if (!nameInput?.value.trim()) {
      showError('Le nom de la collection est requis')
      nameInput?.focus()
      return false
    }

    if (nameInput.value.trim().length > 100) {
      showError('Le nom de la collection ne peut pas dépasser 100 caractères')
      nameInput?.focus()
      return false
    }

    if (descriptionInput?.value && descriptionInput.value.length > 500) {
      showError('La description ne peut pas dépasser 500 caractères')
      descriptionInput?.focus()
      return false
    }

    return true
  }

  // Sauvegarder les modifications
  async function saveCollection() {
    if (!currentCollectionId || !validateForm()) return

    setSaveButtonState(true)
    hideError()

    try {
      const response = await fetch('/api/collections/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          collectionId: currentCollectionId,
          name: nameInput?.value.trim(),
          description: descriptionInput?.value.trim() || null,
          isPublic: publicCheckbox?.checked || false
        }),
      })

      const data = await response.json()

      if (response.ok && data.success) {
        closeEditCollectionModal()
        
        // Appeler la fonction de recalcul des statistiques si elle existe
        if (typeof (window as any).recalculateStats === 'function') {
          (window as any).recalculateStats()
        } else {
          // Fallback : recharger la page
          window.location.reload()
        }
      } else {
        showError(data.error || 'Erreur lors de la mise à jour de la collection')
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour de la collection :', error)
      showError('Erreur de connexion')
    } finally {
      setSaveButtonState(false)
    }
  }

  // Événements
  closeBtn?.addEventListener('click', closeEditCollectionModal)
  cancelBtn?.addEventListener('click', closeEditCollectionModal)
  saveBtn?.addEventListener('click', saveCollection)

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeEditCollectionModal()
  })

  // Valider en temps réel
  nameInput?.addEventListener('input', () => {
    if (nameInput.value.length > 100) {
      nameInput.setCustomValidity('Le nom ne peut pas dépasser 100 caractères')
    } else {
      nameInput.setCustomValidity('')
    }
  })

  descriptionInput?.addEventListener('input', () => {
    if (descriptionInput.value.length > 500) {
      descriptionInput.setCustomValidity('La description ne peut pas dépasser 500 caractères')
    } else {
      descriptionInput.setCustomValidity('')
    }
  })

  // Écouter les événements pour ouvrir le modal
  document.addEventListener('modal:edit-collection:open', (event: Event) => {
    const customEvent = event as CustomEvent
    openEditCollectionModal(customEvent.detail.collection)
  })
</script>
