---
// Composant de toggle pour le th√®me dark/light selon les r√®gles .cursorrules
---

<button
  class="theme-toggle-btn relative inline-flex items-center justify-center w-10 h-10 rounded-lg glass dark:glass-dark hover:glass-emerald-subtle transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 dark:focus:ring-offset-neutral-950"
  aria-label="Basculer le th√®me"
>
  <!-- Ic√¥ne soleil (mode clair) -->
  <svg
    class="sun-icon w-5 h-5 text-neutral-600 dark:text-neutral-400 transition-all duration-200 hidden"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    viewBox="0 0 24 24"
  >
    <circle cx="12" cy="12" r="4"/>
    <path d="M12 2v2"/>
    <path d="M12 20v2"/>
    <path d="m4.93 4.93 1.41 1.41"/>
    <path d="m17.66 17.66 1.41 1.41"/>
    <path d="M2 12h2"/>
    <path d="M20 12h2"/>
    <path d="m6.34 17.66-1.41 1.41"/>
    <path d="m19.07 4.93-1.41 1.41"/>
  </svg>

  <!-- Ic√¥ne lune (mode sombre) -->
  <svg
    class="moon-icon w-5 h-5 text-neutral-600 dark:text-neutral-400 transition-all duration-200 hidden"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    viewBox="0 0 24 24"
  >
    <path d="M18 5h4"/>
    <path d="M20 3v4"/>
    <path d="M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401"/>
  </svg>
</button>

<script>
  import { createDomHelper } from '../../utils/dom-helpers'
  import { createThemeHelper } from '../../utils/theme-helpers'

  // Fonction pour initialiser un toggle de th√®me
  const initThemeToggle = (toggle: HTMLElement): void => {
    const themeHelper = createThemeHelper()
    const sunIcon = toggle.querySelector('.sun-icon') as HTMLElement
    const moonIcon = toggle.querySelector('.moon-icon') as HTMLElement

    // Fonction pour mettre √† jour les ic√¥nes selon les r√®gles
    const updateIcons = (isDark: boolean): void => {
      if (isDark) {
        // Mode sombre : afficher l'ic√¥ne soleil (pour passer au mode clair)
        sunIcon?.classList.remove('hidden')
        moonIcon?.classList.add('hidden')
      } else {
        // Mode clair : afficher l'ic√¥ne lune (pour passer au mode sombre)
        sunIcon?.classList.add('hidden')
        moonIcon?.classList.remove('hidden')
      }
    }

    // Mettre √† jour les ic√¥nes initiales
    updateIcons(themeHelper.isDarkMode())

    // G√©rer le click sur le toggle selon les r√®gles (fonctionnel)
    toggle.addEventListener('click', () => {
      themeHelper.toggleTheme()
      updateIcons(themeHelper.isDarkMode())
      
      // Mettre √† jour tous les autres toggles sur la page
      updateAllThemeToggles()
    })
  }

  // Fonction pour mettre √† jour tous les toggles
  const updateAllThemeToggles = (): void => {
    const themeHelper = createThemeHelper()
    const allToggles = document.querySelectorAll('.theme-toggle-btn')
    
    allToggles.forEach(toggle => {
      const sunIcon = toggle.querySelector('.sun-icon') as HTMLElement
      const moonIcon = toggle.querySelector('.moon-icon') as HTMLElement
      
      if (themeHelper.isDarkMode()) {
        sunIcon?.classList.remove('hidden')
        moonIcon?.classList.add('hidden')
      } else {
        sunIcon?.classList.add('hidden')
        moonIcon?.classList.remove('hidden')
      }
    })
  }

  document.addEventListener('DOMContentLoaded', () => {
    const themeHelper = createThemeHelper()

    // Migration automatique vers dark mode par d√©faut
    const migrateToDarkDefault = (): void => {
      const storedTheme = themeHelper.getStoredTheme()

      // Si aucun th√®me n'est stock√©, ou si c'est le th√®me syst√®me, migrer vers dark
      if (!storedTheme || storedTheme === 'system') {
        console.log('üåô Migration automatique vers dark mode par d√©faut')
        themeHelper.setStoredTheme('dark')
        themeHelper.applyTheme('dark')
      }
    }

    // Appliquer la migration et le th√®me initial
    migrateToDarkDefault()
    themeHelper.initTheme()

    // Initialiser tous les toggles de th√®me
    const allToggles = document.querySelectorAll('.theme-toggle-btn')
    allToggles.forEach(toggle => {
      initThemeToggle(toggle as HTMLElement)
    })

    // √âcouter les changements du th√®me syst√®me
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      if (themeHelper.getStoredTheme() === 'system') {
        themeHelper.initTheme()
        updateAllThemeToggles()
      }
    })
  })
</script>
