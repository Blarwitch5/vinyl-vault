---
// Modal pour créer une nouvelle collection
---

<div
  id="create-collection-modal"
  class="fixed inset-0 bg-black/70 backdrop-blur-sm items-center justify-center z-50 hidden"
>
  <div
    class="bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-700 rounded-2xl p-6 w-full max-w-md mx-4 shadow-2xl"
  >
    <!-- Header -->
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-xl font-bold text-neutral-900 dark:text-neutral-50">Nouvelle collection</h2>
      <button
        id="close-create-collection-modal"
        class="text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50 transition-colors"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
d="M18 6 6 18"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Formulaire -->
    <form id="create-collection-form" class="space-y-4">
      <!-- Nom de la collection -->
      <div>
        <label
          for="collection-name"
          class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2"
        >
          Nom de la collection *
        </label>
        <input
          id="collection-name"
          type="text"
          required
          placeholder="Ex: Ma collection rock"
          class="w-full px-4 py-3 glass-card dark:glass-dark rounded-xl text-neutral-900 dark:text-neutral-50 placeholder-light-textSecondary dark:placeholder-dark-textSecondary focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-transparent"
        />
      </div>

      <!-- Description -->
      <div>
        <label
          for="collection-description"
          class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2"
        >
          Description (optionnel)
        </label>
        <textarea
          id="collection-description"
          rows="3"
          placeholder="Décrivez votre collection..."
          class="w-full px-4 py-3 glass-card dark:glass-dark rounded-xl text-neutral-900 dark:text-neutral-50 placeholder-light-textSecondary dark:placeholder-dark-textSecondary focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-transparent resize-none"
        ></textarea>
      </div>

      <!-- Visibilité -->
      <div>
        <label class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-3">
          Visibilité
        </label>
        <div class="space-y-2">
          <label class="flex items-center space-x-3 cursor-pointer">
            <input
              type="radio"
              name="visibility"
              value="private"
              checked
              class="w-4 h-4 text-emerald-600 bg-neutral-100 border-neutral-300 focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-neutral-800 focus:ring-2 dark:bg-neutral-700 dark:border-neutral-600"
            />
            <div>
              <span class="text-sm font-medium text-neutral-900 dark:text-neutral-50">Privée</span>
              <p class="text-xs text-neutral-600 dark:text-neutral-400">
                Seulement vous pouvez voir cette collection
              </p>
            </div>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer">
            <input
              type="radio"
              name="visibility"
              value="public"
              class="w-4 h-4 text-emerald-600 bg-neutral-100 border-neutral-300 focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-neutral-800 focus:ring-2 dark:bg-neutral-700 dark:border-neutral-600"
            />
            <div>
              <span class="text-sm font-medium text-neutral-900 dark:text-neutral-50">Publique</span
              >
              <p class="text-xs text-neutral-600 dark:text-neutral-400">
                Tout le monde peut voir cette collection
              </p>
            </div>
          </label>
        </div>
      </div>

      <!-- Boutons d'action -->
      <div class="flex space-x-3 pt-4">
        <button
          type="button"
          id="cancel-create-collection"
          class="flex-1 px-4 py-3 glass-card dark:glass-dark text-neutral-900 dark:text-neutral-50 rounded-xl hover:bg-white/80 dark:hover:bg-neutral-900/80 transition-colors"
        >
          Annuler
        </button>
        <button
          type="submit"
          id="submit-create-collection"
          class="flex-1 px-4 py-3 bg-gradient-emerald text-white rounded-xl hover:bg-gradient-emerald/80 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="submit-text">Créer</span>
          <span id="submit-loading" class="hidden">
            <svg
              class="w-4 h-4 animate-spin mx-auto"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
d="M21 12a9 9 0 1 1-6.219-8.56"
              ></path>
            </svg>
          </span>
        </button>
      </div>
    </form>

    <!-- Message d'erreur -->
    <div id="create-collection-error" class="hidden mt-4">
      <div
        class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-4"
      >
        <div class="flex items-center space-x-2">
          <svg
            class="w-5 h-5 text-red-600 dark:text-red-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
                  />
                  <line x1="12" x2="12" y1="9" y2="13"
                  />
                  <line x1="12" x2="12.01" y1="17" y2="17"></path>
          </svg>
          <span id="error-message" class="text-red-600 dark:text-red-400"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Éléments DOM
  const modal = document.getElementById('create-collection-modal')
  const closeBtn = document.getElementById('close-create-collection-modal')
  const cancelBtn = document.getElementById('cancel-create-collection')
  const form = document.getElementById('create-collection-form')
  const submitBtn = document.getElementById('submit-create-collection')
  const submitText = document.getElementById('submit-text')
  const submitLoading = document.getElementById('submit-loading')
  const errorDiv = document.getElementById('create-collection-error')
  const errorMessage = document.getElementById('error-message')

  // Ouvrir le modal avec animation discrète
  function openCreateCollectionModal() {
    if (!modal) return

    document.body.style.overflow = 'hidden'
    modal.style.opacity = '0'
    modal.classList.remove('hidden')
    modal.classList.add('flex')

    setTimeout(() => {
      modal.style.transition = 'opacity 250ms ease-out'
      modal.style.opacity = '1'
    }, 10)

    resetForm()
  }

  // Fermer le modal avec animation discrète
  function closeCreateCollectionModal() {
    if (!modal) return

    modal.style.transition = 'opacity 200ms ease-in'
    modal.style.opacity = '0'

    setTimeout(() => {
      modal.classList.add('hidden')
      modal.classList.remove('flex')
      modal.style.transition = ''
      modal.style.opacity = ''
      document.body.style.overflow = ''
    }, 200)

    resetForm()
  }

  // Réinitialiser le formulaire
  function resetForm() {
    ;(form as HTMLFormElement)?.reset()
    errorDiv?.classList.add('hidden')
    setSubmitButtonState(false)
  }

  // Gérer l'état du bouton de soumission
  function setSubmitButtonState(loading: boolean) {
    if (loading) {
      submitBtn?.setAttribute('disabled', 'true')
      submitText?.classList.add('hidden')
      submitLoading?.classList.remove('hidden')
    } else {
      submitBtn?.removeAttribute('disabled')
      submitText?.classList.remove('hidden')
      submitLoading?.classList.add('hidden')
    }
  }

  // Afficher une erreur
  function showError(message: string) {
    if (errorMessage) {
      errorMessage.textContent = message
    }
    errorDiv?.classList.remove('hidden')
  }

  // Masquer l'erreur
  function hideError() {
    errorDiv?.classList.add('hidden')
  }

  // Événements
  closeBtn?.addEventListener('click', closeCreateCollectionModal)
  cancelBtn?.addEventListener('click', closeCreateCollectionModal)

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeCreateCollectionModal()
  })

  // Soumission du formulaire
  form?.addEventListener('submit', async (e) => {
    e.preventDefault()

    // Éviter les soumissions multiples
    if (submitBtn?.hasAttribute('disabled') || submitBtn?.textContent?.includes('Création...')) {
      console.log('Soumission bloquée - déjà en cours');
      return
    }

    const name = (document.getElementById('collection-name') as HTMLInputElement)?.value.trim()
    const description = (
      document.getElementById('collection-description') as HTMLTextAreaElement
    )?.value.trim()
    const visibility = (
      document.querySelector('input[name="visibility"]:checked') as HTMLInputElement
    )?.value

    if (!name) {
      showError('Le nom de la collection est requis')
      return
    }

    setSubmitButtonState(true)
    hideError()

    try {
      const response = await fetch('/api/collections/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: name,
          description: description,
          isPublic: visibility === 'public',
        }),
      })

      const data = await response.json()

      if (data.success) {
        closeCreateCollectionModal()
        // Mettre à jour le dashboard sans rechargement
        if (typeof (window as any).recalculateStats === 'function') {
          (window as any).recalculateStats()
        } else {
          // Fallback : recharger la page
          window.location.reload()
        }
      } else {
        showError(data.error || 'Erreur lors de la création de la collection')
      }
    } catch {
      showError('Erreur de connexion')
    } finally {
      setSubmitButtonState(false)
    }
  })

  // Écouter les événements pour ouvrir le modal
  document.addEventListener('modal:create-collection:open', openCreateCollectionModal)
</script>
