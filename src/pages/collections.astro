---
import BaseLayout from "../layouts/BaseLayout.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import DeleteCollectionModal from "../components/DeleteCollectionModal.astro";
import EditCollectionModal from "../components/EditCollectionModal.astro";
import CreateCollectionModal from "../components/CreateCollectionModal.astro";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// Vérifier l'authentification (système simplifié)
let currentUser: { id: string; name: string | null; email: string } | null = null;
let userCollections: any[] = [];

try {
  const token = Astro.cookies.get("vinyl_vault_token")?.value;
  if (token) {
    // Système d'authentification simplifié - utiliser l'utilisateur de test
    currentUser = await prisma.user.findUnique({
      where: { id: 'test-user-id' },
      select: { id: true, name: true, email: true },
    });

    if (!currentUser) {
      // Créer l'utilisateur de test s'il n'existe pas
      currentUser = await prisma.user.create({
        data: {
          id: 'test-user-id',
          email: 'demo@vinylvault.com',
          name: 'Utilisateur Test',
          password: 'hashed_password_test',
        },
        select: { id: true, name: true, email: true },
      });
    }
    
    if (currentUser) {
      // Récupérer toutes les collections de l'utilisateur
      userCollections = await prisma.collection.findMany({
        where: { userId: currentUser.id },
        include: {
          vinyls: {
            select: {
              id: true,
              price: true,
            }
          }
        },
        orderBy: { updatedAt: 'desc' }
      });
    }
  }
} catch (error) {
  console.error("Erreur d'authentification:", error);
}
---

<BaseLayout title="Toutes mes collections - Vinyl Vault">
  <Navbar slot="navbar" />
  
  <div class="min-h-screen bg-gradient-to-br from-neutral-50 via-white to-neutral-100 dark:from-neutral-950 dark:via-neutral-900 dark:to-neutral-950">
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-neutral-900 dark:text-neutral-50 mb-2">
              Toutes mes collections
            </h1>
            <p class="text-neutral-600 dark:text-neutral-400">
              {userCollections.length} collection{userCollections.length > 1 ? 's' : ''} au total
            </p>
          </div>
          <a
            href="/dashboard"
            class="inline-flex items-center px-4 py-2 bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
          >
            <svg
              class="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"
              />
            </svg>
            Retour au dashboard
          </a>
        </div>
      </div>

      {!currentUser ? (
        <div class="text-center py-12">
          <div class="glass dark:glass-dark rounded-xl p-8 max-w-md mx-auto">
            <svg
              class="w-16 h-16 text-neutral-400 dark:text-neutral-600 mx-auto mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
              />
            </svg>
            <h2 class="text-xl font-semibold text-neutral-900 dark:text-neutral-50 mb-2">
              Accès restreint
            </h2>
            <p class="text-neutral-600 dark:text-neutral-400 mb-4">
              Vous devez être connecté pour voir vos collections.
            </p>
            <a
              href="/login"
              class="inline-flex items-center px-4 py-2 bg-gradient-emerald text-white rounded-lg hover:bg-gradient-emerald/80 transition-colors"
            >
              Se connecter
            </a>
          </div>
        </div>
      ) : userCollections.length === 0 ? (
        <div class="text-center py-12">
          <div class="glass dark:glass-dark rounded-xl p-8 max-w-md mx-auto">
            <svg
              class="w-16 h-16 text-neutral-400 dark:text-neutral-600 mx-auto mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
              />
            </svg>
            <h2 class="text-xl font-semibold text-neutral-900 dark:text-neutral-50 mb-2">
              Aucune collection
            </h2>
            <p class="text-neutral-600 dark:text-neutral-400 mb-4">
              Commencez par créer votre première collection de vinyles.
            </p>
            <button
              id="create-first-collection"
              class="inline-flex items-center px-4 py-2 bg-gradient-emerald text-white rounded-lg hover:bg-gradient-emerald/80 transition-colors"
            >
              <svg
                class="w-5 h-5 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M5 12h14"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 5v14"
                />
              </svg>
              Créer une collection
            </button>
          </div>
        </div>
      ) : (
        <div class="space-y-6">
          <!-- Actions globales -->
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <button
                id="create-collection-btn"
                class="inline-flex items-center px-4 py-2 bg-gradient-emerald text-white rounded-lg hover:bg-gradient-emerald/80 transition-colors"
              >
                <svg
                  class="w-5 h-5 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M5 12h14"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 5v14"
                  />
                </svg>
                Nouvelle collection
              </button>
            </div>
          </div>

          <!-- Liste des collections -->
          <div class="grid gap-6">
            {userCollections.map((collection: any) => (
              <div 
                class="glass dark:glass-dark rounded-xl p-6 shadow-sm"
                data-collection-vinyl-count={collection.vinyls.length}
              >
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <h3 class="text-xl font-semibold text-neutral-900 dark:text-neutral-50 mb-2">
                      <a
                        href={`/collection/${collection.id}`}
                        class="hover:text-emerald-500 dark:hover:text-emerald-500 transition-colors"
                      >
                        {collection.name}
                      </a>
                    </h3>
                    <p class="text-neutral-600 dark:text-neutral-400 mb-4">
                      {collection.description || "Aucune description"}
                    </p>
                    <div class="flex items-center space-x-6 text-sm text-neutral-600 dark:text-neutral-400">
                      <div class="flex items-center space-x-1">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m0 0V1a1 1 0 011-1h2a1 1 0 011 1v18a1 1 0 01-1 1H4a1 1 0 01-1-1V1a1 1 0 011-1h2a1 1 0 011 1v3z"
                          />
                        </svg>
                        <span>{collection.vinyls.length} vinyle{collection.vinyls.length > 1 ? 's' : ''}</span>
                      </div>
                      <div class="flex items-center space-x-1">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
                          />
                        </svg>
                        <span>{collection.vinyls.reduce((sum: number, vinyl: any) => sum + (vinyl.price || 0), 0).toFixed(2)} €</span>
                      </div>
                      <span
                        class={`px-3 py-1 rounded-full text-xs font-medium ${
                          collection.isPublic
                            ? "bg-gradient-emerald/10 dark:bg-gradient-emerald/20 text-gradient-emerald dark:text-gradient-emerald"
                            : "bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300"
                        }`}
                      >
                        {collection.isPublic ? "Publique" : "Privée"}
                      </span>
                      <div class="flex items-center space-x-1 text-xs text-neutral-500 dark:text-neutral-500">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                        <span>Modifiée {new Date(collection.updatedAt).toLocaleDateString('fr-FR')}</span>
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center space-x-2 ml-4">
                    <a
                      href={`/collection/${collection.id}`}
                      class="inline-flex items-center px-3 py-2 bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors text-sm"
                      title="Voir la collection"
                    >
                      <svg
                        class="w-4 h-4 mr-1"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                        />
                      </svg>
                      Voir
                    </a>
                    <button 
                      class="p-2 text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50 transition-colors"
                      data-collection-action="edit"
                      data-collection-id={collection.id}
                      title="Modifier la collection"
                    >
                      <svg
                        class="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z"
                        />
                      </svg>
                    </button>
                    <button 
                      class="p-2 text-neutral-600 dark:text-neutral-400 hover:text-red-600 dark:hover:text-red-400 transition-colors"
                      data-collection-action="delete"
                      data-collection-id={collection.id}
                      title="Supprimer la collection"
                    >
                      <svg
                        class="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M3 6h5l.645-1.69A2 2 0 0 1 10.53 4h2.94a2 2 0 0 1 1.885 1.31L15 6h5"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 11v6"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M14 11v6"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>

  <Footer slot="footer" />

  <!-- Modals -->
  <CreateCollectionModal />
  <DeleteCollectionModal />
  <EditCollectionModal />
</BaseLayout>

<script>
  // Données des collections disponibles globalement
  const collectionsData = {
    {userCollections && userCollections.length > 0 ? userCollections.map((collection: any) => 
      `'${collection.id}': { name: '${collection.name.replace(/'/g, "\\'")}', vinylCount: ${collection.vinyls.length} }`
    ).join(',\n    ') : ''}
  };

  // Gestion des actions sur la page collections
  document.addEventListener("DOMContentLoaded", () => {
    // Bouton de création de collection (bouton principal)
    const createCollectionBtn = document.getElementById("create-collection-btn");
    createCollectionBtn?.addEventListener("click", () => {
      if (typeof (window as any).openCreateCollectionModal === "function") {
        (window as any).openCreateCollectionModal();
      } else {
        console.error("Modal de création de collection non disponible");
      }
    });

    // Bouton de création de collection (première collection)
    const createFirstCollectionBtn = document.getElementById("create-first-collection");
    createFirstCollectionBtn?.addEventListener("click", () => {
      if (typeof (window as any).openCreateCollectionModal === "function") {
        (window as any).openCreateCollectionModal();
      } else {
        console.error("Modal de création de collection non disponible");
      }
    });

    // Gestion des actions sur les collections (édition et suppression)
    document.querySelectorAll('[data-collection-action]').forEach(button => {
      button.addEventListener('click', (e) => {
        const actionType = (e.currentTarget as HTMLElement)?.getAttribute("data-collection-action");
        const collectionId = (e.currentTarget as HTMLElement)?.getAttribute("data-collection-id");
        
        if (actionType === "edit" && collectionId) {
          editCollection(collectionId);
        } else if (actionType === "delete" && collectionId) {
          deleteCollection(collectionId);
        }
      });
    });

    // Fonction pour éditer une collection
    function editCollection(collectionId: string) {
      // Trouver les informations de la collection depuis le DOM
      const collectionElement = document.querySelector(`[data-collection-id="${collectionId}"]`);
      const collectionName = collectionElement?.closest('.glass')?.querySelector('h3 a')?.textContent || 'Collection';
      const collectionDescription = collectionElement?.closest('.glass')?.querySelector('p')?.textContent || '';
      const isPublic = collectionElement?.closest('.glass')?.querySelector('.text-gradient-emerald')?.textContent?.includes('Publique') || false;
      
      const collection = {
        id: collectionId,
        name: collectionName,
        description: collectionDescription === "Aucune description" ? '' : collectionDescription,
        isPublic: isPublic
      };

      // Ouvrir la modal d'édition
      if (typeof (window as any).openEditCollectionModal === 'function') {
        (window as any).openEditCollectionModal(collection);
      } else {
        console.error('Modal d\'édition de collection non disponible');
        // Fallback avec prompt
        const newName = prompt("Nouveau nom de la collection:");
        if (newName && newName.trim() !== "") {
          console.log("Édition de la collection", collectionId, "avec le nom", newName);
          alert("Fonctionnalité d'édition en cours de développement");
        }
      }
    }

    // Fonction pour supprimer une collection
    function deleteCollection(collectionId: string) {
      // Récupérer les données depuis l'objet global
      const collectionInfo = collectionsData[collectionId];
      
      if (!collectionInfo) {
        console.error('Collection non trouvée:', collectionId);
        return;
      }
      
      const collection = {
        id: collectionId,
        name: collectionInfo.name,
        vinylCount: collectionInfo.vinylCount
      };
      
      console.log('Delete collection debug:', collection);

      // Ouvrir la modal de confirmation
      if (typeof (window as any).openDeleteCollectionModal === 'function') {
        (window as any).openDeleteCollectionModal(collection);
      } else {
        console.error('Modal de suppression de collection non disponible');
        // Fallback avec confirm
        if (confirm("Êtes-vous sûr de vouloir supprimer cette collection ? Cette action est irréversible.")) {
          console.log("Suppression de la collection", collectionId);
          alert("Fonctionnalité de suppression en cours de développement");
        }
      }
    }

    // Fonction pour recalculer les statistiques après suppression/édition
    function recalculateStats() {
      console.log('Recalcul des statistiques...');
      // Recharger la page pour recalculer toutes les statistiques
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    }

    // Exposer la fonction de recalcul pour les modals
    (window as any).recalculateStats = recalculateStats;
  });
</script>
