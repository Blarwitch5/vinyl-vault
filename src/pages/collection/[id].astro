---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Navbar from "../../components/Navbar.astro";
import Footer from "../../components/Footer.astro";
import VinylCard from "../../components/VinylCard.astro";
import VinylCardCompact from "../../components/VinylCardCompact.astro";
import BarcodeScannerModal from "../../components/BarcodeScannerModal.astro";
import DeleteVinylModal from "../../components/DeleteVinylModal.astro";
import ShareCollectionModal from "../../components/ShareCollectionModal.astro";
import TimelineVisualization from "../../components/TimelineVisualization.astro";
import PersonalStatsModal from "../../components/PersonalStatsModal.astro";
import { AddToCollectionModal } from "../../components/collection-modal";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// Récupérer l'ID de la collection depuis l'URL
const { id } = Astro.params;

const title = `Collection #${id} - VinylVault`;
const description = "Explorez cette collection de vinyles en détail";

// Vérifier l'authentification (système simplifié)
let currentUser: { id: string; name: string | null; email: string } | null = null;
let isAuthenticated = false;

try {
  const token = Astro.cookies.get("vinyl_vault_token")?.value;
  if (token) {
    // Système d'authentification simplifié - récupérer le premier utilisateur
    currentUser = await prisma.user.findFirst({
      orderBy: { createdAt: 'desc' },
      select: { id: true, name: true, email: true },
    });

    if (!currentUser) {
      // Rediriger vers la page de connexion si aucun utilisateur n'est trouvé
      return Astro.redirect('/login');
    }
    
    isAuthenticated = !!currentUser;
  }
} catch (error) {
  console.error("Erreur d'authentification:", error);
}

// Récupérer les vraies données de la collection depuis la base de données
let collection: any = null;
let collectionVinyls: any[] = [];
let error: string | null = null;

try {
  collection = await prisma.collection.findUnique({
    where: { id: id as string },
    include: {
      user: {
        select: {
          id: true,
          name: true,
          email: true,
        },
      },
      vinyls: {
        orderBy: {
          createdAt: 'desc'
        }
      },
    },
  });

  if (collection) {
    collectionVinyls = collection.vinyls;
    console.log('Vinyles récupérés:', collectionVinyls);
  } else {
    error = "Collection non trouvée";
  }
} catch (err) {
  console.error("Erreur lors de la récupération de la collection:", err);
  error = "Erreur lors du chargement de la collection";
}

// Calculer les statistiques de la collection
const stats: {
  topArtists: { name: string; count: number }[];
  formatBreakdown: { format: string; count: number; percentage: number }[];
  conditionBreakdown: { condition: string; count: number; percentage: number }[];
} = {
  topArtists: [],
  formatBreakdown: [],
  conditionBreakdown: [],
};

if (collection && collectionVinyls.length > 0) {
  // Top artistes
  const artistCounts: { [key: string]: number } = {};
  collectionVinyls.forEach((vinyl: any) => {
    artistCounts[vinyl.artist] = (artistCounts[vinyl.artist] || 0) + 1;
  });
  stats.topArtists = Object.entries(artistCounts)
    .map(([name, count]) => ({ name, count: count as number }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 5);

  // Répartition par format
  const formatCounts: { [key: string]: number } = {};
  collectionVinyls.forEach((vinyl: any) => {
    const format = vinyl.format || 'Inconnu';
    formatCounts[format] = (formatCounts[format] || 0) + 1;
  });
  const totalVinyls = collectionVinyls.length;
  stats.formatBreakdown = Object.entries(formatCounts)
    .map(([format, count]) => ({
      format,
      count: count as number,
      percentage: Math.round(((count as number) / totalVinyls) * 100)
    }))
    .sort((a, b) => b.count - a.count);

  // Répartition par état
  const conditionCounts: { [key: string]: number } = {};
  collectionVinyls.forEach((vinyl: any) => {
    const condition = vinyl.condition || 'Inconnu';
    conditionCounts[condition] = (conditionCounts[condition] || 0) + 1;
  });
  stats.conditionBreakdown = Object.entries(conditionCounts)
    .map(([condition, count]) => ({
      condition,
      count: count as number,
      percentage: Math.round(((count as number) / totalVinyls) * 100)
    }))
    .sort((a, b) => b.count - a.count);
}

// Filtres et tri
const sortBy = Astro.url.searchParams.get("sort") || "title";
const filterGenre = Astro.url.searchParams.get("genre") || "";
const filterFormat = Astro.url.searchParams.get("format") || "";
---

<BaseLayout title={title} description={description}>
  <Navbar slot="navbar" />

  <div class="container mx-auto px-4 py-8 overflow-x-hidden">
    {error ? (
      <div class="text-center py-12">
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-8 max-w-md mx-auto">
          <div class="text-red-600 dark:text-red-400 mb-4">
            <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h2 class="text-xl font-semibold text-red-800 dark:text-red-200 mb-2">
            Erreur
          </h2>
          <p class="text-red-700 dark:text-red-300 mb-4">
            {error}
          </p>
          <a 
            href="/dashboard" 
            class="inline-flex items-center px-4 py-2 bg-gradient-emerald dark:bg-gradient-emerald text-white rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors"
          >
            Retour au tableau de bord
          </a>
        </div>
      </div>
    ) : collection ? (
    <!-- Section Informations Collection - Mobile First -->
    <div class="glass dark:glass-dark rounded-xl shadow-sm mb-6">
      <!-- Header avec titre et statut -->
      <div class="p-4 md:p-6 border-b border-neutral-200/50 dark:border-neutral-800/50">
        <div class="flex flex-col space-y-3">
          <!-- Titre et statut sur une ligne sur mobile, séparés sur desktop -->
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
            <div class="flex flex-col sm:flex-row sm:items-center gap-2">
              <h1 class="text-2xl sm:text-3xl font-bold text-neutral-900 dark:text-neutral-50">
                {collection.name}
              </h1>
              <span
                class={`px-3 py-1 rounded-full text-sm font-medium self-start sm:self-auto ${
                  collection.isPublic
                    ? "bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400"
                    : "bg-neutral-200 dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300"
                }`}
              >
                {collection.isPublic ? "Publique" : "Privée"}
              </span>
            </div>
            
            <!-- Boutons d'action - Responsive -->
            {currentUser && currentUser.id === collection.userId && (
              <div class="flex flex-col sm:flex-row gap-2">
                <button class="w-full sm:w-auto bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 transition-colors text-sm font-medium">
                  Modifier
                </button>
                <button 
                  id="share-collection-btn"
                  class="w-full sm:w-auto flex items-center justify-center sm:justify-start space-x-2 border border-neutral-200 dark:border-neutral-700 text-neutral-900 dark:text-neutral-50 px-4 py-2 rounded-xl hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors text-sm font-medium"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                  </svg>
                  <span>Partager</span>
                </button>
              </div>
            )}
          </div>

          <!-- Description -->
          <p class="text-neutral-600 dark:text-neutral-400 text-sm sm:text-base leading-relaxed">
            {collection.description || "Aucune description disponible"}
          </p>
        </div>
      </div>

      <!-- Statistiques - Layout optimisé mobile -->
      <div class="p-4 md:p-6">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <!-- Propriétaire -->
          <div class="bg-neutral-50 dark:bg-neutral-800/50 rounded-lg p-3">
            <div class="text-xs text-neutral-500 dark:text-neutral-400 uppercase tracking-wide font-medium mb-1">
              Propriétaire
            </div>
            <div class="font-semibold text-neutral-900 dark:text-neutral-50 text-sm truncate">
              {collection.user.name || collection.user.email}
            </div>
          </div>

          <!-- Nombre de vinyles -->
          <div class="bg-neutral-50 dark:bg-neutral-800/50 rounded-lg p-3">
            <div class="text-xs text-neutral-500 dark:text-neutral-400 uppercase tracking-wide font-medium mb-1">
              Vinyles
            </div>
            <div class="font-semibold text-neutral-900 dark:text-neutral-50 text-lg">
              {collectionVinyls.length}
            </div>
          </div>

          <!-- Valeur totale -->
          <div class="bg-neutral-50 dark:bg-neutral-800/50 rounded-lg p-3">
            <div class="text-xs text-neutral-500 dark:text-neutral-400 uppercase tracking-wide font-medium mb-1">
              Valeur totale
            </div>
            <div class="font-semibold text-neutral-900 dark:text-neutral-50 text-lg">
              {collectionVinyls.reduce((sum: number, vinyl: any) => sum + (vinyl.price || 0), 0).toFixed(2)} €
            </div>
          </div>

          <!-- Dernière mise à jour -->
          <div class="bg-neutral-50 dark:bg-neutral-800/50 rounded-lg p-3">
            <div class="text-xs text-neutral-500 dark:text-neutral-400 uppercase tracking-wide font-medium mb-1">
              Mise à jour
            </div>
            <div class="font-semibold text-neutral-900 dark:text-neutral-50 text-sm">
              {new Date(collection.updatedAt).toLocaleDateString("fr-FR", { 
                day: 'numeric', 
                month: 'short' 
              })}
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="grid lg:grid-cols-4 gap-6">
      <!-- Sidebar - Filtres et statistiques -->
      <div class="lg:col-span-1 space-y-4">
        <!-- Filtres -->
        <div class="mb-6 md:mb-0">
      <div class="glass dark:glass-dark rounded-xl shadow-sm">
          <div
            class="px-4 py-3 border-b border-neutral-200 dark:border-white/10"
          >
            <h3
              class="text-lg font-semibold text-neutral-900 dark:text-neutral-50"
            >
              Filtres
            </h3>
          </div>
          <div class="p-4 space-y-4">
            <form method="get" class="space-y-4">
              <!-- Tri -->
              <div>
                <label
                  for="sort"
                  class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-1"
                >
                  Trier par
                </label>
                <select
                  id="sort"
                  name="sort"
                  class="w-full px-3 py-2  rounded-xl focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 bg-neutral-50 dark:bg-black/20 text-neutral-900 dark:text-neutral-50 text-sm"
                >
                  <option value="title" selected={sortBy === "title" ? true : undefined}
                    >Titre</option
                  >
                  <option value="artist" selected={sortBy === "artist" ? true : undefined}
                    >Artiste</option
                  >
                  <option value="year" selected={sortBy === "year" ? true : undefined}
                    >Année</option
                  >
                  <option value="price" selected={sortBy === "price" ? true : undefined}
                    >Prix</option
                  >
                  <option value="condition" selected={sortBy === "condition" ? true : undefined}
                    >État</option
                  >
                  <option value="added" selected={sortBy === "added" ? true : undefined}
                    >Date d'ajout</option
                  >
                </select>
              </div>

              <!-- Genre -->
              <div>
                <label
                  for="genre"
                  class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-1"
                >
                  Genre
                </label>
                <select
                  id="genre"
                  name="genre"
                  class="w-full px-3 py-2  rounded-xl focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 bg-neutral-50 dark:bg-black/20 text-neutral-900 dark:text-neutral-50 text-sm"
                >
                  <option value="">Tous les genres</option>
                  <option value="rock" selected={filterGenre === "rock" ? true : undefined}
                    >Rock</option
                  >
                  <option value="jazz" selected={filterGenre === "jazz" ? true : undefined}
                    >Jazz</option
                  >
                  <option value="pop" selected={filterGenre === "pop" ? true : undefined}
                    >Pop</option
                  >
                  <option
                    value="electronic"
                    selected={filterGenre === "electronic" ? true : undefined}>Electronic</option
                  >
                </select>
              </div>

              <!-- Format -->
              <div>
                <label
                  for="format"
                  class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-1"
                >
                  Format
                </label>
                <select
                  id="format"
                  name="format"
                  class="w-full px-3 py-2  rounded-xl focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 bg-neutral-50 dark:bg-black/20 text-neutral-900 dark:text-neutral-50 text-sm"
                >
                  <option value="">Tous les formats</option>
                  <option value="LP" selected={filterFormat === "LP" ? true : undefined}>LP</option
                  >
                  <option value="12" selected={filterFormat === "12" ? true : undefined}
                    >12"</option
                  >
                  <option value="7" selected={filterFormat === "7" ? true : undefined}>7"</option>
                  <option value="EP" selected={filterFormat === "EP" ? true : undefined}>EP</option
                  >
                </select>
              </div>

              <button
                type="submit"
                class="w-full bg-gradient-emerald dark:bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors text-sm"
              >
                Appliquer
              </button>
            </form>
          </div>
        </div>

        <!-- Statistiques - Visible sur desktop et tablette -->
        <div class="hidden md:block glass dark:glass-dark rounded-xl shadow-sm">
          <div class="px-4 py-3 border-b border-neutral-200 dark:border-white/10">
            <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-50">
              Statistiques
            </h3>
          </div>
          <div class="p-4 space-y-4">
            <!-- Top artistes -->
            <div>
              <h4 class="text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                Top artistes
              </h4>
              <div class="space-y-1">
                {
                  stats.topArtists.map((artist) => (
                    <div class="flex items-center justify-between text-sm">
                      <span class="text-neutral-900 dark:text-neutral-50">
                        {artist.name}
                      </span>
                      <span class="text-neutral-400 bg-neutral-900 px-2 py-1 rounded text-xs">
                        {artist.count}
                      </span>
                    </div>
                  ))
                }
              </div>
            </div>

            <!-- Formats -->
            <div>
              <h4 class="text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                Formats
              </h4>
              <div class="space-y-2">
                {
                  stats.formatBreakdown.map((format) => (
                    <div>
                      <div class="flex items-center justify-between text-sm mb-1">
                        <span class="text-neutral-900 dark:text-neutral-50">
                          {format.format}
                        </span>
                        <span class="text-neutral-400 bg-neutral-900 px-2 py-1 rounded text-xs whitespace-nowrap">
                          {format.count} ({format.percentage}%)
                        </span>
                      </div>
                      <div class="w-full glass dark:glass-dark shadow-sm dark:shadow-white rounded-full h-1">
                        <div
                          class="bg-gradient-emerald dark:bg-gradient-emerald h-1 rounded-full"
                          style={`width: ${format.percentage}%`}
                        />
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>

            <!-- État -->
            <div>
              <h4 class="text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                État
              </h4>
              <div class="space-y-2">
                {
                  stats.conditionBreakdown.map((condition) => (
                    <div>
                      <div class="flex items-center justify-between text-sm mb-1">
                        <span class="text-neutral-900 dark:text-neutral-50">
                          {condition.condition}
                        </span>
                        <span class="text-neutral-400 bg-neutral-900 px-2 py-1 rounded text-xs whitespace-nowrap">
                          {condition.count} ({condition.percentage}%)
                        </span>
                      </div>
                      <div class="w-full glass dark:glass-dark shadow-sm dark:shadow-white rounded-full h-1">
                        <div
                          class="bg-gradient-emerald dark:bg-gradient-emerald h-1 rounded-full"
                          style={`width: ${condition.percentage}%`}
                        />
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Statistiques mobile - Visible uniquement sur mobile -->
      <div class="md:hidden mb-6">
        <div class="glass dark:glass-dark rounded-xl shadow-sm">
          <div class="px-4 py-3 border-b border-neutral-200 dark:border-white/10">
            <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-50">
              Statistiques
            </h3>
          </div>
          <div class="p-4">
            <div class="grid grid-cols-1 gap-4">
              <!-- Top artistes -->
              <div>
                <h4 class="text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                  Top artistes
                </h4>
                <div class="space-y-1">
                  {
                    stats.topArtists.map((artist) => (
                      <div class="flex items-center justify-between text-sm">
                        <span class="text-neutral-900 dark:text-neutral-50">
                          {artist.name}
                        </span>
                        <span class="text-neutral-400 bg-neutral-900 px-2 py-1 rounded text-xs">
                          {artist.count}
                        </span>
                      </div>
                    ))
                  }
                </div>
              </div>

              <!-- Formats -->
              <div>
                <h4 class="text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                  Formats
                </h4>
                <div class="space-y-2">
                  {
                    stats.formatBreakdown.map((format) => (
                      <div>
                        <div class="flex items-center justify-between text-sm mb-1">
                          <span class="text-neutral-900 dark:text-neutral-50">
                            {format.format}
                          </span>
                          <span class="text-neutral-400 bg-neutral-900 px-2 py-1 rounded text-xs whitespace-nowrap">
                            {format.count} ({format.percentage}%)
                          </span>
                        </div>
                        <div class="w-full glass dark:glass-dark shadow-sm dark:shadow-white rounded-full h-1">
                          <div
                            class="bg-gradient-emerald dark:bg-gradient-emerald h-1 rounded-full"
                            style={`width: ${format.percentage}%`}
                          />
                        </div>
                      </div>
                    ))
                  }
                </div>
              </div>

              <!-- État -->
              <div>
                <h4 class="text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                  État
                </h4>
                <div class="space-y-2">
                  {
                    stats.conditionBreakdown.map((condition) => (
                      <div>
                        <div class="flex items-center justify-between text-sm mb-1">
                          <span class="text-neutral-900 dark:text-neutral-50">
                            {condition.condition}
                          </span>
                          <span class="text-neutral-400 bg-neutral-900 px-2 py-1 rounded text-xs whitespace-nowrap">
                            {condition.count} ({condition.percentage}%)
                          </span>
                        </div>
                        <div class="w-full glass dark:glass-dark shadow-sm dark:shadow-white rounded-full h-1">
                          <div
                            class="bg-gradient-emerald dark:bg-gradient-emerald h-1 rounded-full"
                            style={`width: ${condition.percentage}%`}
                          />
                        </div>
                      </div>
                    ))
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      
    </div>
    <!-- Contenu principal -->
      <div class="lg:col-span-3">
        <!-- En-tête avec actions -->
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
          <div>
            <h2 class="text-2xl font-bold text-neutral-900 dark:text-neutral-50">
              Vinyles ({collectionVinyls.length})
            </h2>
            <p class="text-neutral-600 dark:text-neutral-400">
              {collectionVinyls.length} vinyles dans cette collection
            </p>
          </div>
          <div class="flex items-center gap-3">
            <!-- Boutons de vue -->
            <div class="flex items-center glass dark:glass-dark rounded-xl p-1">
              <button
                id="collection-grid-view"
                class="px-3 py-1 rounded-xl text-sm font-medium bg-white dark:bg-neutral-800 text-neutral-900 dark:text-neutral-50 shadow-sm"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                  ></path>
                </svg>
              </button>
              <button
                id="collection-list-view"
                class="px-3 py-1 rounded-xl text-sm font-medium text-neutral-600 dark:text-neutral-400 hover:bg-white dark:hover:bg-neutral-800 transition-colors"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 5h.01"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 12h.01"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 19h.01"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 5h13"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 12h13"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8 19h13"></path>
                </svg>
              </button>
              <button
                id="collection-timeline-btn"
                class="px-3 py-1 rounded-xl text-sm font-medium text-neutral-600 dark:text-neutral-400 hover:bg-white dark:hover:bg-neutral-800 transition-colors"
                title="Vue chronologique"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </button>
            </div>
          </div>

          {
            currentUser && currentUser.id === collection.userId && (
              <button
                id="add-vinyl-collection-btn"
                class="bg-gradient-emerald dark:bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors"
              >
                + Ajouter un vinyle
              </button>
            )
          }
        </div>

        <!-- Grille des vinyles -->
        <div
          id="collection-vinyl-grid"
          class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4 mb-8"
        >
          {
            collectionVinyls.map((vinyl) => (
              <VinylCardCompact
                vinyl={vinyl}
                showActions={!!(currentUser && currentUser.id === collection.userId)}
                isInCollection={true}
              />
            ))
          }
        </div>

        <!-- Vue liste (cachée par défaut) -->
        <div id="collection-vinyl-list" class="hidden space-y-4">
          {
            collectionVinyls.map((vinyl) => (
              <div class="glass dark:glass-dark rounded-xl p-4 flex items-center space-x-4 hover:bg-white/80 dark:hover:bg-neutral-900/80 transition-colors">
                <!-- Pre-fetch de la page de détail du vinyle -->
                <link rel="prefetch" href={`/vinyl/${vinyl.id}`} />
                <img
                  src={vinyl.coverImage || "/default-vinyl-cover.svg"}
                  alt={`Couverture de ${vinyl.title}`}
                  class="w-16 h-16 object-cover rounded-lg shadow-sm"
                />
                <div class="flex-1 min-w-0 overflow-hidden">
                  <h3 class="font-semibold text-neutral-900 dark:text-neutral-50 truncate">
                    {vinyl.title}
                  </h3>
                  <p class="text-neutral-600 dark:text-neutral-400 truncate">
                    {vinyl.artist}
                  </p>
                  <div class="flex items-center space-x-2 text-sm text-neutral-600 dark:text-neutral-400">
                    <span>{vinyl.year}</span>
                    <span>•</span>
                    <span>{vinyl.format}</span>
                    <span>•</span>
                    <span class={`px-2 py-1 rounded-full text-xs ${
                      vinyl.condition === 'Mint' ? 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400' :
                      vinyl.condition === 'Near Mint' ? 'bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400' :
                      vinyl.condition === 'Very Good Plus' ? 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-400' :
                      vinyl.condition === 'Very Good' ? 'bg-orange-100 dark:bg-orange-900/20 text-orange-800 dark:text-orange-400' :
                      'bg-gray-100 dark:bg-gray-900/20 text-gray-800 dark:text-gray-400'
                    }`}>
                      {vinyl.condition}
                    </span>
                  </div>
                </div>
                <div class="text-right flex items-center space-x-4">
                  <div class="text-right">
                    <div class="font-semibold text-neutral-900 dark:text-neutral-50">
                      {vinyl.price?.toFixed(2)} €
                    </div>
                  </div>
                  <div class="flex space-x-2 mt-2">
                    <a
                      href={`/vinyl/${vinyl.id}`}
                      class="text-gradient-emerald dark:text-gradient-emerald hover:text-gradient-emerald/80 dark:hover:text-gradient-emerald/80 text-sm"
                    >
                      Voir
                    </a>
                    {currentUser && currentUser.id === collection.userId && (
                      <button 
                        class="text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm"
                        data-vinyl-id={vinyl.id || ''}
                        data-vinyl-title={vinyl.title || ''}
                        data-vinyl-artist={vinyl.artist || ''}
                        data-vinyl-year={vinyl.year || ''}
                        data-vinyl-format={vinyl.format || ''}
                        data-vinyl-condition={vinyl.condition || ''}
                        data-vinyl-price={vinyl.price || 0}
                        data-vinyl-cover={vinyl.coverImage || '/default-vinyl-cover.svg'}
                      >
                        Supprimer
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Vue chronologique (cachée par défaut) -->
        <div 
          id="collection-timeline-view" 
          class="hidden"
          data-collection-id={collection.id}
          data-collection-name={collection.name}
          data-user-id={collection.userId}
          data-vinyl-count={collectionVinyls.length}
          data-is-public={collection?.isPublic || false}
        >
          <TimelineVisualization 
            collectionId={collection.id} 
            userId={collection.userId}
          />
        </div>

        {
          collectionVinyls.length === 0 && (
            <div class="text-center py-12">
              <div class="text-neutral-600 dark:text-neutral-400 mb-4">
                <svg
                  class="mx-auto h-12 w-12"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 11H5m14-5v12a2 2 0 01-2 2H7a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2z"
                  />
                </svg>
              </div>
              <h3 class="text-lg font-medium text-neutral-900 dark:text-neutral-50 mb-2">
                Aucun vinyle dans cette collection
              </h3>
              <p class="text-neutral-600 dark:text-neutral-400 mb-4">
                Commencez par ajouter quelques vinyles à votre collection.
              </p>
              {currentUser && currentUser.id === collection.userId && (
                <button
                  id="add-vinyl-empty-btn"
                  class="bg-gradient-emerald dark:bg-gradient-emerald text-white px-6 py-2 rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors"
                >
                  Ajouter un vinyle
                </button>
              )}
            </div>
          )
        }
      </div>
  </div>
    ) : (
      <div class="text-center py-12">
        <div class="inline-flex items-center">
          <svg class="animate-spin h-8 w-8 text-gradient-emerald dark:text-gradient-emerald mr-3" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="text-lg text-neutral-600 dark:text-neutral-400">Chargement de la collection...</span>
        </div>
      </div>
    )}
  </div>

  <Footer slot="footer" />

  <!-- Modals -->
  <BarcodeScannerModal />
  <DeleteVinylModal />
  <ShareCollectionModal />
  <PersonalStatsModal />
  <AddToCollectionModal />
</BaseLayout>

<script>
  // Gestion des vues (grille/liste/chronologie)
  document.addEventListener("DOMContentLoaded", () => {
    const gridViewBtn = document.getElementById("collection-grid-view");
    const listViewBtn = document.getElementById("collection-list-view");
    const timelineViewBtn = document.getElementById("collection-timeline-btn");
    const vinylGrid = document.getElementById("collection-vinyl-grid");
    const vinylList = document.getElementById("collection-vinyl-list");
    const timelineView = document.getElementById("collection-timeline-view");

    // Vérifier si tous les éléments nécessaires existent
    if (!gridViewBtn || !listViewBtn || !timelineViewBtn || !vinylGrid || !vinylList || !timelineView) {
      return;
    }

    function switchToGridView() {
      gridViewBtn?.classList.add(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      gridViewBtn?.classList.remove(
        "text-neutral-600",
        "dark:text-neutral-400"
      );
      listViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      listViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      timelineViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      timelineViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      vinylGrid?.classList.remove("hidden");
      vinylList?.classList.add("hidden");
      timelineView?.classList.add("hidden");
    }

    function switchToListView() {
      listViewBtn?.classList.add(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      listViewBtn?.classList.remove(
        "text-neutral-600",
        "dark:text-neutral-400"
      );
      gridViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      gridViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      vinylGrid?.classList.add("hidden");
      vinylList?.classList.remove("hidden");
      timelineView?.classList.add("hidden");
    }

    function switchToTimelineView() {
      timelineViewBtn?.classList.add(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      timelineViewBtn?.classList.remove(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      gridViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      gridViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      listViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      listViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      vinylGrid?.classList.add("hidden");
      vinylList?.classList.add("hidden");
      timelineView?.classList.remove("hidden");
      
      // Initialiser le composant timeline si nécessaire
      const timelineViewContainer = document.getElementById("collection-timeline-view");
      
      if (timelineViewContainer && !timelineViewContainer.dataset.initialized) {
        const collectionId = timelineViewContainer.dataset.collectionId || '';
        const userId = timelineViewContainer.dataset.userId || '';
        
        if (collectionId && userId && typeof (window as any).TimelineVisualization === 'function') {
          new (window as any).TimelineVisualization(collectionId, userId);
          timelineViewContainer.dataset.initialized = "true";
        }
      }
    }

    gridViewBtn?.addEventListener("click", switchToGridView);
    listViewBtn?.addEventListener("click", switchToListView);
    timelineViewBtn?.addEventListener("click", switchToTimelineView);

    // Auto-submit des filtres
    const filterForm = document.querySelector("form");
    const selects = filterForm?.querySelectorAll("select");

    selects?.forEach((select) => {
      select.addEventListener("change", () => {
        filterForm?.submit();
      });
    });

    // Gestion des boutons d'ajout de vinyle
    const addVinylCollectionBtn = document.getElementById(
      "add-vinyl-collection-btn"
    );
    const addVinylEmptyBtn = document.getElementById("add-vinyl-empty-btn");

    const openBarcodeModal = () => {
      if (typeof (window as any).openBarcodeModal === "function") {
        (window as any).openBarcodeModal();
      } else {
        console.error("Modal de scan de code-barres non disponible");
        alert(
          "Le modal de scan de code-barres n'est pas disponible. Veuillez recharger la page."
        );
      }
    };

    addVinylCollectionBtn?.addEventListener("click", openBarcodeModal);
    addVinylEmptyBtn?.addEventListener("click", openBarcodeModal);

    // Gestion du bouton de partage
    const shareCollectionBtn = document.getElementById("share-collection-btn");
    const timelineViewContainer = document.getElementById("collection-timeline-view");
    
    if (shareCollectionBtn && timelineViewContainer) {
      const collectionData = {
        id: timelineViewContainer.dataset.collectionId || '',
        name: timelineViewContainer.dataset.collectionName || '',
        vinylCount: parseInt(timelineViewContainer.dataset.vinylCount || '0'),
        isPublic: timelineViewContainer.dataset.isPublic === 'true'
      };
      
      shareCollectionBtn.addEventListener("click", () => {
        if (typeof (window as any).openShareModal === "function") {
          (window as any).openShareModal(collectionData);
        } else {
          console.error("Modal de partage non disponible");
        }
      });
    }

    // Gestion des boutons de suppression dans la vue liste
    const deleteButtons = document.querySelectorAll('button[data-vinyl-id]');
    deleteButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();

        const vinylId = button.getAttribute('data-vinyl-id');
        if (!vinylId) return;
        
        // Récupérer les informations du vinyle depuis les attributs data
        const vinyl = {
          id: vinylId,
          title: button.getAttribute('data-vinyl-title') || 'Titre inconnu',
          artist: button.getAttribute('data-vinyl-artist') || 'Artiste inconnu',
          year: button.getAttribute('data-vinyl-year') || '',
          format: button.getAttribute('data-vinyl-format') || '',
          condition: button.getAttribute('data-vinyl-condition') || '',
          price: parseFloat(button.getAttribute('data-vinyl-price') || '0'),
          coverImage: button.getAttribute('data-vinyl-cover') || '/default-vinyl-cover.svg'
        };

        // Vérifier que les données essentielles sont présentes
        if (!vinyl.title || vinyl.title === 'Titre inconnu') {
          console.error('Titre du vinyle manquant');
        }
        if (!vinyl.artist || vinyl.artist === 'Artiste inconnu') {
          console.error('Artiste du vinyle manquant');
        }

        console.log('Bouton cliqué:', button);
        console.log('Tous les attributs du bouton:', button.attributes);
        console.log('Attributs data:', {
          id: button.getAttribute('data-vinyl-id'),
          title: button.getAttribute('data-vinyl-title'),
          artist: button.getAttribute('data-vinyl-artist'),
          year: button.getAttribute('data-vinyl-year'),
          format: button.getAttribute('data-vinyl-format'),
          condition: button.getAttribute('data-vinyl-condition'),
          price: button.getAttribute('data-vinyl-price'),
          cover: button.getAttribute('data-vinyl-cover')
        });
        console.log('Données du vinyle à supprimer:', vinyl);
        
        // Vérifier si les données sont vides
        if (!vinyl.title || vinyl.title === 'Titre inconnu') {
          console.error('PROBLÈME: Titre manquant ou vide');
        }
        if (!vinyl.artist || vinyl.artist === 'Artiste inconnu') {
          console.error('PROBLÈME: Artiste manquant ou vide');
        }

        // Ouvrir la modal de confirmation
        if (typeof (window as any).openDeleteVinylModal === 'function') {
          (window as any).openDeleteVinylModal(vinyl);
        } else {
          console.error('Modal de suppression non disponible');
          // Fallback avec confirm
          if (confirm(`Êtes-vous sûr de vouloir supprimer "${vinyl.title}" de votre collection ?`)) {
            await removeFromCollection(vinylId);
          }
        }
      });
    });

    // Fonction pour supprimer un vinyle de la collection
    async function removeFromCollection(vinylId: string) {
      try {
        const response = await fetch(`/api/collections/remove`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ vinylId }),
        });

        if (response.ok) {
          // Recharger la page pour mettre à jour l'affichage
          window.location.reload();
        } else {
          const error = await response.json();
          console.error('Erreur lors de la suppression:', error);
          alert('Erreur lors de la suppression du vinyle');
        }
      } catch (error) {
        console.error('Erreur lors de la suppression:', error);
        alert('Erreur lors de la suppression du vinyle');
      }
    }
  });
</script>
