---
import BaseLayout from "../layouts/BaseLayout.astro";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import VinylCard from "../components/VinylCard.astro";
import VinylCardCompact from "../components/VinylCardCompact.astro";
import BarcodeScannerModal from "../components/BarcodeScannerModal.astro";
import CreateCollectionModal from "../components/CreateCollectionModal.astro";
import DeleteVinylModal from "../components/DeleteVinylModal.astro";
import DeleteCollectionModal from "../components/DeleteCollectionModal.astro";
import EditCollectionModal from "../components/EditCollectionModal.astro";
import PersonalStatsModal from "../components/PersonalStatsModal.astro";
import { AddToCollectionModal } from "../components/collection-modal";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

const title = "Tableau de bord - VinylVault";
const description =
  "Gérez votre collection de vinyles personnelle et suivez vos statistiques";

// Vérifier l'authentification
let currentUser = null;
let userCollections: any[] = [];
let recentVinyls: any[] = [];
let totalCollections: number = 0;
let recentActivity: any[] = [];
let error = null;

const token = Astro.cookies.get("vinyl_vault_token")?.value;

try {
  if (token) {
    // Récupérer l'utilisateur authentifié
    currentUser = await prisma.user.findFirst({
      where: {
        // Pour simplifier, on prend le premier utilisateur créé
        // En production, vous devriez décoder le JWT pour obtenir l'ID exact
      },
      orderBy: {
        createdAt: 'desc',
      },
      select: { id: true, name: true, email: true },
    });

    if (currentUser) {
      // Récupérer toutes les collections de l'utilisateur (maximum 5)
      userCollections = await prisma.collection.findMany({
        where: { userId: currentUser.id },
        include: {
          vinyls: {
            select: {
              id: true,
              title: true,
              artist: true,
              year: true,
              price: true,
              coverImage: true,
        },
          },
        },
        orderBy: { createdAt: 'desc' }
        // Pas de limite car on affiche toutes les collections (max 5 grâce à la limite de création)
      });

      // Plus besoin de compter le total car on affiche toutes les collections
      totalCollections = userCollections.length;

      // Récupérer les vinyles récents de l'utilisateur (pour l'affichage)
      recentVinyls = await prisma.vinyl.findMany({
        where: { userId: currentUser.id },
        orderBy: { createdAt: 'desc' },
        take: 4
      });

    }
  }
} catch (err) {
  console.error("Erreur lors de la récupération des données:", err);
  error = "Erreur lors du chargement des données";
  // Initialiser les variables pour éviter les erreurs
}

// Calculer les statistiques basées sur TOUS les vinyles de l'utilisateur
let allUserVinyls: any[] = [];
let stats = {
  totalVinyls: 0,
  totalValue: 0,
  totalCollections: userCollections.length,
  averageValue: 0,
  topGenres: [] as { name: string; count: number }[],
};

if (currentUser) {
  // Récupérer TOUS les vinyles de l'utilisateur pour les statistiques
  allUserVinyls = await prisma.vinyl.findMany({
    where: { userId: currentUser.id },
    select: {
      id: true,
      price: true,
      genre: true,
    }
  });

  // Calculer les vraies statistiques
  stats.totalVinyls = allUserVinyls.length;
  stats.totalValue = allUserVinyls.reduce((sum, vinyl) => sum + (vinyl.price || 0), 0);
  stats.averageValue = allUserVinyls.length > 0 ? stats.totalValue / allUserVinyls.length : 0;

  // Calculer les genres les plus populaires sur TOUS les vinyles
  if (allUserVinyls.length > 0) {
  const genreCounts: { [key: string]: number } = {};
    allUserVinyls.forEach((vinyl: any) => {
    if (vinyl.genre) {
      genreCounts[vinyl.genre] = (genreCounts[vinyl.genre] || 0) + 1;
    }
  });
  stats.topGenres = Object.entries(genreCounts)
    .map(([name, count]) => ({ name, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 4);

  // Récupérer l'activité récente
  try {
    const activityResponse = await fetch(`${Astro.url.origin}/api/dashboard/recent-activity`, {
      headers: {
        'Cookie': `vinyl_vault_token=${token}`,
      },
    });
    
    if (activityResponse.ok) {
      const activityData = await activityResponse.json();
      if (activityData.success) {
        recentActivity = activityData.activity || [];
      }
    }
  } catch (activityError) {
    console.error('Erreur lors de la récupération de l\'activité récente:', activityError);
  }
  }
}
---

<BaseLayout title={title} description={description}>
  <Navbar slot="navbar" />

  <div class="container mx-auto px-4 py-8">
    {error ? (
      <!-- Message d'erreur -->
      <div class="text-center py-12">
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-8 max-w-md mx-auto">
          <div class="text-red-600 dark:text-red-400 mb-4">
            <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10"/>
              <line x1="12" x2="12" y1="8" y2="12"/>
              <line x1="12" x2="12.01" y1="16" y2="16"/>
            </svg>
          </div>
          <h2 class="text-xl font-semibold text-red-800 dark:text-red-200 mb-2">
            Erreur
          </h2>
          <p class="text-red-700 dark:text-red-300 mb-4">
            {error}
          </p>
          <a 
            href="/login" 
             class="inline-flex items-center px-4 py-2 bg-gradient-emerald text-white rounded-xl hover:bg-gradient-emerald/80 transition-colors"
          >
            Se connecter
          </a>
        </div>
      </div>
    ) : !currentUser ? (
      <!-- Non connecté -->
      <div class="text-center py-12">
         <div class="glass dark:glass-dark rounded-xl p-8 max-w-md mx-auto">
          <h2 class="text-xl font-semibold text-neutral-900 dark:text-neutral-50 mb-2">
            Connexion requise
          </h2>
          <p class="text-neutral-600 dark:text-neutral-400 mb-4">
            Veuillez vous connecter pour accéder à votre tableau de bord
          </p>
          <a 
            href="/login" 
             class="inline-flex items-center px-4 py-2 bg-gradient-emerald text-white rounded-xl hover:bg-gradient-emerald/80 transition-colors"
          >
            Se connecter
          </a>
        </div>
      </div>
    ) : (
      <!-- Contenu du tableau de bord -->
      <>
        <!-- En-tête du tableau de bord -->
        <div class="mb-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-neutral-900 dark:text-neutral-50 mb-2">
                Mon tableau de bord
          </h1>
              <p class="text-lg text-neutral-600 dark:text-neutral-400">
                Bonjour <span class="font-semibold text-emerald-600 dark:text-emerald-400">{currentUser.name || currentUser.email}</span>
              </p>
              <p class="text-sm text-neutral-500 dark:text-neutral-500 mt-1">
                Gérez votre collection de vinyles et suivez vos statistiques
              </p>
            </div>
            <div class="hidden md:flex items-center space-x-3">
              <div class="text-right">
                <p class="text-sm text-neutral-500 dark:text-neutral-500">
                  Dernière connexion
                </p>
                <p class="text-sm font-medium text-neutral-700 dark:text-neutral-300">
                  {new Date().toLocaleDateString('fr-FR', { 
                    weekday: 'long', 
                    day: 'numeric', 
                    month: 'long' 
                  })}
                </p>
              </div>
            </div>
          </div>
        </div>

    <!-- Statistiques rapides -->
    <div class="mb-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-semibold text-neutral-900 dark:text-neutral-50">
          Vue d'ensemble
        </h2>
        <button
          id="personal-stats-btn"
          class="text-sm text-emerald-600 dark:text-emerald-400 hover:text-emerald-700 dark:hover:text-emerald-300 transition-colors flex items-center"
          title="Voir les statistiques détaillées"
        >
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
            <path d="M3 3v16a2 2 0 0 0 2 2h16"/>
            <path d="M18 17V9"/>
            <path d="M13 17V5"/>
            <path d="M8 17v-3"/>
          </svg>
          Statistiques détaillées
        </button>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <!-- Total vinyles -->
      <div
        class="glass dark:glass-dark p-5 rounded-xl shadow-sm hover:shadow-md transition-shadow border border-neutral-200/50 dark:border-neutral-800/50"
      >
        <div class="flex items-start justify-between">
        <div class="flex items-center">
          <div
              class="p-3 bg-gradient-emerald/10 dark:bg-gradient-emerald/20 rounded-lg"
          >
            <svg
              class="w-6 h-6 text-gradient-emerald dark:text-gradient-emerald"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              viewBox="0 0 24 24"
            >
              <circle cx="12" cy="12" r="10"/>
              <path d="M6 12c0-1.7.7-3.2 1.8-4.2"/>
              <circle cx="12" cy="12" r="2"/>
              <path d="M18 12c0 1.7-.7 3.2-1.8 4.2"/>
            </svg>
          </div>
          <div class="ml-4">
            <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-1"
            >
              Total vinyles
            </p>
            <p
              class="text-2xl font-bold text-neutral-900 dark:text-neutral-50 font-mono"
                data-stat="total-vinyls"
            >
              {stats.totalVinyls}
            </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Valeur totale -->
      <div
        class="glass dark:glass-dark p-5 rounded-xl shadow-sm hover:shadow-md transition-shadow border border-neutral-200/50 dark:border-neutral-800/50"
      >
        <div class="flex items-start justify-between">
        <div class="flex items-center">
          <div
                   class="p-3 bg-gradient-emerald/10 dark:bg-gradient-emerald/20 rounded-lg"
          >
            <svg
              class="w-6 h-6 text-gradient-emerald dark:text-gradient-emerald"
              fill="none"
              stroke="currentColor"
                     stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                     viewBox="0 0 24 24"
                   >
                     <path d="M11 17h3v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a3.16 3.16 0 0 0 2-2h1a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-1a5 5 0 0 0-2-4V3a4 4 0 0 0-3.2 1.6l-.3.4H11a6 6 0 0 0-6 6v1a5 5 0 0 0 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1z"/>
                     <path d="M16 10h.01"/>
                     <path d="M2 8v1a2 2 0 0 0 2 2h1"/>
            </svg>
          </div>
          <div class="ml-4">
            <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-1"
            >
              Valeur totale
            </p>
            <p
              class="text-2xl font-bold text-neutral-900 dark:text-neutral-50 font-mono"
                data-stat="total-value"
            >
              {stats.totalValue.toFixed(2)} €
            </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Collections -->
      <div
        class="glass dark:glass-dark p-5 rounded-xl shadow-sm hover:shadow-md transition-shadow border border-neutral-200/50 dark:border-neutral-800/50"
      >
        <div class="flex items-start justify-between">
        <div class="flex items-center">
            <div
              class="p-3 bg-gradient-emerald/10 dark:bg-gradient-emerald/20 rounded-lg"
            >
            <svg
              class="w-6 h-6 text-gradient-emerald dark:text-gradient-emerald"
              fill="none"
              stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                viewBox="0 0 24 24"
              >
                <path d="m16 6 4 14"/>
                <path d="M12 6v14"/>
                <path d="M8 8v12"/>
                <path d="M4 4v16"/>
            </svg>
          </div>
          <div class="ml-4">
            <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-1"
            >
              Collections
            </p>
            <p
              class="text-2xl font-bold text-neutral-900 dark:text-neutral-50 font-mono"
                data-stat="total-collections"
            >
              {stats.totalCollections}
            </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Valeur moyenne -->
      <div
        class="glass dark:glass-dark p-5 rounded-xl shadow-sm hover:shadow-md transition-shadow border border-neutral-200/50 dark:border-neutral-800/50"
      >
        <div class="flex items-start justify-between">
        <div class="flex items-center">
            <div
              class="p-3 bg-gradient-emerald/10 dark:bg-gradient-emerald/20 rounded-lg"
            >
            <svg
                class="w-6 h-6 text-gradient-emerald dark:text-gradient-emerald"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
            </svg>
          </div>
          <div class="ml-4">
            <p
                class="text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-1"
            >
              Valeur moyenne
            </p>
            <p
              class="text-2xl font-bold text-neutral-900 dark:text-neutral-50 font-mono"
                data-stat="average-value"
            >
              {stats.averageValue.toFixed(2)} €
            </p>
            </div>
          </div>
          </div>
        </div>
      </div>
    </div>

    <div class="grid lg:grid-cols-4 gap-6">
      <!-- Section principale - Collections -->
      <div class="lg:col-span-3">
        <!-- Mes collections -->
        <div
          class="glass dark:glass-dark rounded-xl shadow-sm mb-8"
        >
          <div
            class="px-6 py-4  border-neutral-200 dark:border-neutral-800"
          >
            <div class="flex items-center justify-between">
              <h2
                class="text-xl font-semibold text-neutral-900 dark:text-neutral-50"
              >
                Mes collections
              </h2>
              <button
                id="new-collection-btn"
                class="bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 transition-colors text-sm flex items-center"
                title="Créer une nouvelle collection"
              >
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
d="M5 12h14"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 5v14"
                  />
                </svg>
                Nouvelle collection
              </button>
            </div>
          </div>
          <div class="p-6">
            <div class="space-y-4" data-collections-section>
              {
                userCollections.map((collection: any) => (
                  <div 
                    class="bg-neutral-50 dark:bg-neutral-950 dark:bg-gradient-emerald-subtle dark:glass-emerald-border rounded-xl p-4 shadow-sm dark:shadow-white"
                    data-collection-vinyl-count={collection.vinyls.length}
                  >
                    <div class="flex items-center justify-between">
                      <div class="flex-1">
                        <h3 class="text-lg font-medium text-neutral-900 dark:text-neutral-50 mb-1">
                          <a
                            href={`/collection/${collection.id}`}
                             class="hover:text-emerald-500 dark:hover:text-emerald-500"
                          >
                            {collection.name}
                          </a>
                        </h3>
                        <p class="text-sm text-neutral-600 dark:text-neutral-400 mb-2">
                          {collection.description || "Aucune description"}
                        </p>
                        <div class="flex items-center space-x-4 text-sm text-neutral-600 dark:text-neutral-400">
                          <span>{collection.vinyls.length} vinyles</span>
                          <span>{collection.vinyls.reduce((sum: number, vinyl: any) => sum + (vinyl.price || 0), 0).toFixed(2)} €</span>
                          <span
                            class={`px-2 py-1 rounded-full text-xs ${
                              collection.isPublic
                                ? "bg-gradient-emerald/10 dark:bg-gradient-emerald/20 text-gradient-emerald dark:text-gradient-emerald"
                                 : "glass dark:glass-dark text-neutral-900 dark:text-neutral-50"
                            }`}
                          >
                            {collection.isPublic ? "Publique" : "Privée"}
                          </span>
                        </div>
                      </div>
                      <div class="flex items-center space-x-2">
                        <a
                          href={`/collection/${collection.id}`}
                          class="text-neutral-600 dark:text-neutral-400 hover:text-emerald-600 dark:hover:text-emerald-400"
                          title="Voir la collection"
                        >
                          <svg
                            class="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
d="M2 12s3-7.5 10-7.5 10 7.5 10 7.5-3 7.5-10 7.5S2 12 2 12Z"
                            />
                            <circle cx="12" cy="12" r="3"
                            />
                          </svg>
                        </a>
                        <button 
                          class="text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50"
                          data-collection-action="edit"
                          data-collection-id={collection.id}
                          title="Modifier la collection"
                        >
                          <svg
                            class="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z"
                            />
                          </svg>
                        </button>
                        <button 
                          class="text-neutral-600 dark:text-neutral-400 hover:text-red-600 dark:hover:text-red-400"
                          data-collection-action="delete"
                          data-collection-id={collection.id}
                          title="Supprimer la collection"
                        >
                          <svg
                            class="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
d="M3 6h5l.645-1.69A2 2 0 0 1 10.53 4h2.94a2 2 0 0 1 1.885 1.31L15 6h5"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 11v6"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M14 11v6"
                            />
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>

        <!-- Vinyles récents -->
        <div
          class="glass dark:glass-dark rounded-xl shadow-sm"
        >
          <div
            class="px-6 py-4  border-neutral-200 dark:border-neutral-800"
          >
            <div class="flex items-center justify-between">
            <h2
              class="text-xl font-semibold text-neutral-900 dark:text-neutral-50"
            >
              Ajouts récents
            </h2>
              <div class="flex items-center gap-3">
                <!-- Boutons de vue -->
                <div class="flex items-center glass dark:glass-dark rounded-xl p-1">
                  <button
                    id="dashboard-grid-view"
                    class="px-3 py-1 rounded-xl text-sm font-medium bg-white dark:bg-neutral-800 text-neutral-900 dark:text-neutral-50 shadow-sm"
                    title="Vue grille"
                  >
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                      ></path>
                    </svg>
                  </button>
                  <button
                    id="dashboard-list-view"
                    class="px-3 py-1 rounded-xl text-sm font-medium text-neutral-600 dark:text-neutral-400 hover:bg-white dark:hover:bg-neutral-800 transition-colors"
                    title="Vue liste"
                  >
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 5h.01"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 12h.01"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 19h.01"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 5h13"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 12h13"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 19h13"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div class="p-4">
            <!-- Vue grille (par défaut) -->
            <div id="dashboard-vinyl-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4">
              {
                recentVinyls.map((vinyl: any) => (
                  <VinylCardCompact
                    vinyl={vinyl}
                    showViewOnly={true}
                    isInCollection={true}
                  />
                ))
              }
            </div>

            <!-- Vue liste (cachée par défaut) -->
            <div id="dashboard-vinyl-list" class="hidden space-y-3">
              {
                recentVinyls.map((vinyl: any) => (
                  <div class="glass dark:glass-dark rounded-xl p-3 flex items-center space-x-3 hover:bg-white/80 dark:hover:bg-neutral-900/80 transition-colors">
                    <img
                      src={vinyl.coverImage || "/default-vinyl-cover.svg"}
                      alt={`Couverture de ${vinyl.title}`}
                      class="w-12 h-12 object-cover rounded-lg shadow-sm"
                    />
                    <div class="flex-1 min-w-0">
                      <h3 class="font-medium text-neutral-900 dark:text-neutral-50 truncate text-sm">
                        {vinyl.title}
                      </h3>
                      <p class="text-neutral-600 dark:text-neutral-400 truncate text-xs">
                        {vinyl.artist}
                      </p>
                      <div class="flex items-center space-x-2 text-xs text-neutral-600 dark:text-neutral-400">
                        <span>{vinyl.year}</span>
                        <span>•</span>
                        <span>{vinyl.format}</span>
                        <span>•</span>
                        <span class={`px-1.5 py-0.5 rounded-full text-xs ${
                          vinyl.condition === 'Mint' ? 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400' :
                          vinyl.condition === 'Near Mint' ? 'bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400' :
                          vinyl.condition === 'Very Good Plus' ? 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-400' :
                          vinyl.condition === 'Very Good' ? 'bg-orange-100 dark:bg-orange-900/20 text-orange-800 dark:text-orange-400' :
                          'bg-gray-100 dark:bg-gray-900/20 text-gray-800 dark:text-gray-400'
                        }`}>
                          {vinyl.condition}
                        </span>
                      </div>
                    </div>
                    <div class="text-right flex items-center space-x-2">
                      <div class="font-medium text-neutral-900 dark:text-neutral-50 text-sm">
                        {vinyl.price?.toFixed(2)} €
                      </div>
                      <a
                        href={`/vinyl/${vinyl.id}`}
                        class="bg-gradient-emerald hover:bg-gradient-emerald/80 text-white p-1.5 rounded-full transition-colors shadow-sm"
                        title="Voir les détails"
                      >
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                          />
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                          />
                        </svg>
              </a>
            </div>
          </div>
                ))
              }
            </div>

          </div>
        </div>
      </div>

      <!-- Sidebar - Statistiques et actions -->
      <div class="space-y-4">
        <!-- Genres favoris -->
        <div
          class="glass dark:glass-dark rounded-xl shadow-sm"
        >
          <div
            class="px-6 py-4  border-neutral-200 dark:border-neutral-800"
          >
            <h3
              class="text-lg font-semibold text-neutral-900 dark:text-neutral-50"
            >
              Genres favoris
            </h3>
          </div>
          <div class="p-6">
            <div class="space-y-3" data-stat="top-genres">
              {
                stats.topGenres.map((genre) => (
                  <div class="flex items-center justify-between">
                    <span class="text-sm font-medium text-neutral-900 dark:text-neutral-50">
                      {genre.name}
                    </span>
                    <div class="flex items-center">
                       <div class="w-20 glass dark:glass-dark rounded-full h-2 mr-3">
                        <div
                          class="bg-gradient-emerald h-2 rounded-full"
                          style={`width: ${(genre.count / stats.totalVinyls) * 100}%`}
                        />
                      </div>
                      <span class="text-sm text-neutral-600 dark:text-neutral-400">
                        {genre.count}
                      </span>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>

        <!-- Actions rapides -->
        <div
          class="glass dark:glass-dark rounded-xl shadow-sm"
        >
          <div
            class="px-6 py-4  border-neutral-200 dark:border-neutral-800"
          >
            <h3
              class="text-lg font-semibold text-neutral-900 dark:text-neutral-50"
            >
              Actions rapides
            </h3>
          </div>
          <div class="p-6 space-y-3">
            <button
              id="add-vinyl-btn"
              class="w-full text-left p-3 rounded-lg hover:bg-white dark:hover:bg-neutral-950 transition-colors"
              title="Ouvrir le scanner de code-barres pour ajouter un vinyle"
            >
              <div class="flex items-center">
                <svg
                   class="w-5 h-5 text-emerald-500 dark:text-emerald-500 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
d="M5 12h14"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 5v14"></path>
                </svg>
                <span
                  class="text-sm font-medium text-neutral-900 dark:text-neutral-50"
                  >Ajouter un vinyle</span
                >
              </div>
            </button>

            <a
              href="/search"
              class="w-full text-left p-3 rounded-lg hover:bg-white dark:hover:bg-neutral-950 transition-colors block"
              title="Rechercher des vinyles sur Discogs"
            >
              <div class="flex items-center">
                <svg
                   class="w-5 h-5 text-emerald-500 dark:text-emerald-500 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path d="M3 7V5a2 2 0 0 1 2-2h2"/>
                  <path d="M17 3h2a2 2 0 0 1 2 2v2"/>
                  <path d="M21 17v2a2 2 0 0 1-2 2h-2"/>
                  <path d="M7 21H5a2 2 0 0 1-2-2v-2"/>
                  <circle cx="12" cy="12" r="3"/>
                  <path d="m16 16-1.9-1.9"/>
                </svg>
                <span
                  class="text-sm font-medium text-neutral-900 dark:text-neutral-50"
                  >Rechercher dans Discogs</span
                >
              </div>
            </a>

            <button
              id="create-collection-btn"
              class="w-full text-left p-3 rounded-lg hover:bg-white dark:hover:bg-neutral-950 transition-colors"
              title="Créer une nouvelle collection"
            >
              <div class="flex items-center">
                <svg
                   class="w-5 h-5 text-emerald-500 dark:text-emerald-500 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
d="M5 12h14"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 5v14"
                  />
                </svg>
                <span
                  class="text-sm font-medium text-neutral-900 dark:text-neutral-50"
                  >Nouvelle collection</span
                >
              </div>
            </button>

            <a
              href="/profile"
              class="w-full text-left p-3 rounded-lg hover:bg-white dark:hover:bg-neutral-950 transition-colors block"
              title="Voir et modifier votre profil"
            >
              <div class="flex items-center">
                <svg
                   class="w-5 h-5 text-emerald-500 dark:text-emerald-500 mr-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                  ></path>
                </svg>
                <span
                  class="text-sm font-medium text-neutral-900 dark:text-neutral-50"
                  >Mon profil</span
                >
              </div>
            </a>
          </div>
        </div>

        <!-- Dernière activité -->
        <div
          class="glass dark:glass-dark rounded-xl shadow-sm"
        >
          <div
            class="px-6 py-4  border-neutral-200 dark:border-neutral-800"
          >
            <h3
              class="text-lg font-semibold text-neutral-900 dark:text-neutral-50"
            >
              Activité récente
            </h3>
          </div>
          <div class="p-6">
            {recentActivity.length > 0 ? (
            <div class="space-y-3 text-sm">
                {recentActivity.map((activity: any) => (
              <div class="flex items-start">
                <div
                      class={`w-2 h-2 rounded-full mt-2 mr-3 ${
                        activity.color === 'emerald' 
                          ? 'bg-gradient-emerald' 
                          : activity.color === 'yellow' 
                          ? 'bg-yellow-500' 
                          : 'bg-blue-500'
                      }`}
                >
                </div>
                <div>
                  <p class="text-neutral-900 dark:text-neutral-50">
                        {activity.title}
                      </p>
                      <p class="text-neutral-600 dark:text-neutral-400">
                        {activity.description}
                        {activity.collection && (
                          <span class="text-neutral-500 dark:text-neutral-500">
                            {" "}dans {activity.collection}
                          </span>
                        )}
                      </p>
                      <p class="text-neutral-500 dark:text-neutral-500 text-xs">
                        {activity.timeAgo}
                  </p>
                </div>
              </div>
                ))}
                </div>
            ) : (
              <div class="text-center py-8">
                <div class="text-neutral-400 dark:text-neutral-500 mb-2">
                  <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <p class="text-neutral-500 dark:text-neutral-400 text-sm">
                  Aucune activité récente
                </p>
                <p class="text-neutral-400 dark:text-neutral-500 text-xs mt-1">
                  Commencez par ajouter des vinyles ou créer des collections
                  </p>
                </div>
            )}
          </div>
        </div>
      </div>
    </div>
      </>
    )}
  </div>

  <Footer slot="footer" />

  <!-- Modals -->
  <BarcodeScannerModal />
  <CreateCollectionModal />
  <DeleteVinylModal />
  <DeleteCollectionModal />
  <EditCollectionModal />
  <PersonalStatsModal />
  <AddToCollectionModal />
</BaseLayout>

<script>
  // Données des collections disponibles globalement
  const collectionsData = {};

  // Gestion des actions du tableau de bord
  document.addEventListener("DOMContentLoaded", () => {
    // Bouton d'ajout de vinyle (scanner de code-barres)
    const addVinylBtn = document.getElementById("add-vinyl-btn");
    addVinylBtn?.addEventListener("click", () => {
      if (typeof (window as any).openBarcodeModal === "function") {
        (window as any).openBarcodeModal();
      } else {
        console.error("Modal de scan de code-barres non disponible");
        // Fallback : rediriger vers la page de recherche
        window.location.href = "/search";
      }
    });

    // Bouton de création de collection (dans la section collections)
    // Note: Le bouton est conditionnel - soit "new-collection-btn" (actif) soit "new-collection-btn-disabled" (désactivé)
    const newCollectionBtn = document.getElementById("new-collection-btn");
    newCollectionBtn?.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent('modal:create-collection:open'));
    });

    // Bouton de création de collection dans la sidebar
    const sidebarCreateCollectionBtn = document.getElementById("create-collection-btn");
    sidebarCreateCollectionBtn?.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent('modal:create-collection:open'));
    });

    // Bouton des statistiques détaillées
    const personalStatsBtn = document.getElementById("personal-stats-btn");
    personalStatsBtn?.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent('modal:personal-stats:open'))
    });

    // Mettre à jour le bouton de création de collection au chargement initial
    // Utiliser setTimeout pour s'assurer que le DOM est complètement rendu
    setTimeout(() => {
      // Récupérer le nombre de collections depuis l'API
      fetch('/api/collections/list', {
        method: 'GET',
        credentials: 'include',
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log('Mise à jour initiale du bouton avec:', data.collections.length, 'collections');
          updateCreateCollectionButton(data.collections.length);
        }
      })
      .catch(error => {
        console.error('Erreur lors du chargement initial des collections:', error);
      });
    }, 100);

    // Le bouton désactivé (new-collection-btn-disabled) n'a pas besoin d'event listener
    // Il est déjà disabled et ne peut pas être cliqué

    // Bouton de création de collection (dans les actions rapides)
    const createCollectionBtn = document.getElementById("create-collection-btn");
    createCollectionBtn?.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent('modal:create-collection:open'));
    });

    // Gestion des vues grid/list pour le dashboard
    const dashboardGridViewBtn = document.getElementById("dashboard-grid-view");
    const dashboardListViewBtn = document.getElementById("dashboard-list-view");
    const dashboardVinylGrid = document.getElementById("dashboard-vinyl-grid");
    const dashboardVinylList = document.getElementById("dashboard-vinyl-list");

    function switchToDashboardGridView() {
      dashboardGridViewBtn?.classList.add(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      dashboardGridViewBtn?.classList.remove(
        "text-neutral-600",
        "dark:text-neutral-400"
      );
      dashboardListViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      dashboardListViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      dashboardVinylGrid?.classList.remove("hidden");
      dashboardVinylList?.classList.add("hidden");
    }

    function switchToDashboardListView() {
      dashboardListViewBtn?.classList.add(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      dashboardListViewBtn?.classList.remove(
        "text-neutral-600",
        "dark:text-neutral-400"
      );
      dashboardGridViewBtn?.classList.remove(
        "bg-white",
        "dark:bg-neutral-800",
        "text-neutral-900",
        "dark:text-neutral-50",
        "shadow-sm"
      );
      dashboardGridViewBtn?.classList.add(
        "text-neutral-600",
        "dark:text-neutral-400"
      );

      dashboardVinylGrid?.classList.add("hidden");
      dashboardVinylList?.classList.remove("hidden");
    }

    dashboardGridViewBtn?.addEventListener("click", switchToDashboardGridView);
    dashboardListViewBtn?.addEventListener("click", switchToDashboardListView);

    // Fonction pour attacher les event listeners des actions de collection
    function attachCollectionActionListeners() {
      const collectionActions = document.querySelectorAll("[data-collection-action]");
      collectionActions.forEach((action) => {
        action.addEventListener("click", (e) => {
          const actionType = (e.currentTarget as HTMLElement)?.getAttribute("data-collection-action");
          const collectionId = (e.currentTarget as HTMLElement)?.getAttribute("data-collection-id");
          
          if (actionType === "edit" && collectionId) {
            editCollection(collectionId);
          } else if (actionType === "delete" && collectionId) {
            deleteCollection(collectionId);
        }
      });
    });
    }

    // Gestion des actions sur les collections existantes (chargement initial)
    attachCollectionActionListeners();

    // Fonction pour éditer une collection
    function editCollection(collectionId: string) {
      // Trouver les informations de la collection depuis le DOM
      const collectionElement = document.querySelector(`[data-collection-id="${collectionId}"]`);
      const collectionName = collectionElement?.closest('.glass')?.querySelector('h3 a')?.textContent || 'Collection';
      const collectionDescription = collectionElement?.closest('.glass')?.querySelector('p')?.textContent || '';
      const isPublic = collectionElement?.closest('.glass')?.querySelector('.text-gradient-emerald')?.textContent?.includes('Publique') || false;
      
      const collection = {
        id: collectionId,
        name: collectionName,
        description: collectionDescription === "Aucune description" ? '' : collectionDescription,
        isPublic: isPublic
      };

      // Ouvrir la modal d'édition
      if (typeof (window as any).openEditCollectionModal === 'function') {
        (window as any).openEditCollectionModal(collection);
      } else {
        console.error('Modal d\'édition de collection non disponible');
        // Fallback avec prompt
        const newName = prompt("Nouveau nom de la collection :");
        if (newName && newName.trim()) {
          console.log("Édition de la collection", collectionId, "avec le nom", newName);
          alert("Fonctionnalité d'édition en cours de développement");
        }
      }
    }

    // Fonction pour supprimer une collection
    function deleteCollection(collectionId: string) {
      // Récupérer les données depuis le DOM
      const collectionElement = document.querySelector(`[data-collection-id="${collectionId}"]`);
      const collectionCard = collectionElement?.closest('.glass');
      const collectionName = collectionCard?.querySelector('h3 a')?.textContent || 'Collection';
      const vinylCount = parseInt(collectionCard?.querySelector('[data-collection-vinyl-count]')?.getAttribute('data-collection-vinyl-count') || '0');
      
      const collection = {
        id: collectionId,
        name: collectionName,
        vinylCount: vinylCount
      };
      
      console.log('Delete collection debug:', collection);

      // Ouvrir la modal de confirmation
      if (typeof (window as any).openDeleteCollectionModal === 'function') {
        (window as any).openDeleteCollectionModal(collection);
      } else {
        console.error('Modal de suppression de collection non disponible');
        // Fallback avec confirm
        if (confirm("Êtes-vous sûr de vouloir supprimer cette collection ? Cette action est irréversible.")) {
          console.log("Suppression de la collection", collectionId);
          alert("Fonctionnalité de suppression en cours de développement");
        }
      }
    }

    // Fonction pour recharger les collections
    async function reloadCollections() {
      console.log('Rechargement des collections...');
      try {
        const response = await fetch('/api/collections/list', {
          method: 'GET',
          credentials: 'include',
        });

        const data = await response.json();

        if (response.ok && data.success) {
          // Mettre à jour la liste des collections dans l'interface
          console.log('Appel de updateCollectionsDisplay avec:', data.collections.length, 'collections');
          console.log('Conteneur des collections trouvé:', document.querySelector('[data-collections-section]') ? 'OUI' : 'NON');
          updateCollectionsDisplay(data.collections);
          console.log('Collections rechargées:', data.collections);
          
          // Retourner le nombre de collections
          return data.collections.length;
        } else {
          console.error('Erreur lors du rechargement des collections');
          return 0;
        }
      } catch (error) {
        console.error('Erreur lors du rechargement des collections:', error);
        return 0;
      }
    }

    // Fonction pour mettre à jour l'affichage des collections
    function updateCollectionsDisplay(collections: any[]) {
      console.log('updateCollectionsDisplay appelée avec:', collections.length, 'collections');
      const collectionsContainer = document.querySelector('[data-collections-section]');
      if (!collectionsContainer) {
        console.log('Conteneur des collections non trouvé');
        return;
      }

      // Afficher toutes les collections (maximum 5 grâce à la limite de création)
      const collectionsHTML = collections.map(collection => `
        <div 
          class="bg-neutral-50 dark:bg-neutral-950 dark:bg-gradient-emerald-subtle dark:glass-emerald-border rounded-xl p-4 shadow-sm dark:shadow-white"
          data-collection-id="${collection.id}"
          data-collection-vinyl-count="${collection.vinyl_count || 0}"
        >
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <h3 class="font-semibold text-neutral-900 dark:text-neutral-50 text-lg mb-1">
                ${collection.name}
              </h3>
                <p class="text-neutral-600 dark:text-neutral-400 text-sm mb-2">
                  ${collection.vinyl_count || 0} vinyles • ${collection.total_value || 0} €
                </p>
              <div class="flex items-center space-x-4 text-xs text-neutral-500 dark:text-neutral-500">
                <span>Moyenne: ${collection.average_price || 0} €</span>
                <span class="flex items-center">
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24">
                    <path d="M20 6 9 17l-5-5"/>
                  </svg>
                  ${collection.is_public ? 'Publique' : 'Privée'}
                </span>
              </div>
            </div>
            <div class="flex items-center space-x-2 ml-4">
              <a
                href="/collection/${collection.id}"
                class="text-neutral-600 dark:text-neutral-400 hover:text-emerald-600 dark:hover:text-emerald-400"
                title="Voir la collection"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
d="M2 12s3-7.5 10-7.5 10 7.5 10 7.5-3 7.5-10 7.5S2 12 2 12Z"
                  />
                  <circle cx="12" cy="12" r="3"
                  />
                </svg>
              </a>
              <button 
                class="text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-50"
                data-collection-action="edit"
                data-collection-id="${collection.id}"
                title="Modifier la collection"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z"
                  />
                </svg>
              </button>
              <button 
                class="text-neutral-600 dark:text-neutral-400 hover:text-red-600 dark:hover:text-red-400"
                data-collection-action="delete"
                data-collection-id="${collection.id}"
                title="Supprimer la collection"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
d="M3 6h5l.645-1.69A2 2 0 0 1 10.53 4h2.94a2 2 0 0 1 1.885 1.31L15 6h5"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 11v6"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M14 11v6"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>
      `).join('');

      // Mettre à jour le contenu (plus de bouton "Voir toutes les collections")
      const collectionsSection = document.querySelector('[data-collections-section]');
      if (collectionsSection) {
        collectionsSection.innerHTML = collectionsHTML;
        console.log('Collections mises à jour avec succès');
      } else {
        // Fallback si l'attribut data-collections-section n'existe pas
        collectionsContainer.innerHTML = collectionsHTML;
        console.log('Collections mises à jour avec fallback');
      }

      // Réattacher les event listeners pour les actions de collection
      attachCollectionActionListeners();

      // Mettre à jour le bouton de création de collection
      updateCreateCollectionButton(collections.length);
    }

    // Fonction pour mettre à jour le bouton de création de collection
    function updateCreateCollectionButton(collectionsCount: number) {
      console.log('updateCreateCollectionButton appelée avec:', collectionsCount);
      
      // Trouver le bouton principal (actif ou désactivé)
      const mainBtn = document.getElementById("new-collection-btn") || document.getElementById("new-collection-btn-disabled");
      
      // Trouver le bouton sidebar
      const sidebarBtn = document.getElementById("create-collection-btn");
      
      if (!mainBtn) {
        console.log('Bouton principal non trouvé');
        return;
      }

      console.log('Bouton principal trouvé:', mainBtn.id);

      if (collectionsCount < 5) {
        // Activer le bouton principal avec icône +
        mainBtn.id = "new-collection-btn";
        mainBtn.removeAttribute('disabled');
        mainBtn.className = "bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 transition-colors text-sm flex items-center";
        mainBtn.innerHTML = `
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v14" />
          </svg>
          Nouvelle collection
        `;
        mainBtn.title = "Créer une nouvelle collection";
        
        // Activer le bouton sidebar
        if (sidebarBtn) {
          sidebarBtn.style.display = "block";
          sidebarBtn.title = "Créer une nouvelle collection";
          sidebarBtn.innerHTML = `
            <div class="flex items-center">
              <svg class="w-5 h-5 text-emerald-500 dark:text-emerald-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v14" />
              </svg>
              <span class="text-sm font-medium text-neutral-900 dark:text-neutral-50">Nouvelle collection</span>
            </div>
          `;
        }
        
        console.log('Boutons activés avec icône +');
      } else {
        // Désactiver le bouton principal (sans icône)
        mainBtn.id = "new-collection-btn-disabled";
        mainBtn.setAttribute('disabled', 'true');
        mainBtn.className = "bg-neutral-300 dark:bg-neutral-700 text-neutral-500 dark:text-neutral-400 px-4 py-2 rounded-xl cursor-not-allowed text-sm";
        mainBtn.textContent = "Limite atteinte (5/5)";
        mainBtn.title = "Limite de 5 collections atteinte";
        
        // Masquer le bouton sidebar
        if (sidebarBtn) {
          sidebarBtn.style.display = "none";
        }
        
        console.log('Boutons désactivés');
      }
    }

    // Fonction pour recalculer les statistiques après suppression/édition
    async function recalculateStats() {
      console.log('Recalcul des statistiques...');
      try {
        // Recharger les collections en premier et récupérer le nombre
        const collectionsCount = await reloadCollections();
        
        // Puis recalculer les statistiques
        const response = await fetch('/api/dashboard/recalculate-stats', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
        });

        const data = await response.json();

        if (response.ok && data.success) {
          // Mettre à jour les statistiques dans l'interface
          updateStatsDisplay(data.stats);
          
          // Mettre à jour le bouton de création de collection avec le nombre réel de collections
          console.log('Mise à jour du bouton avec collectionsCount:', collectionsCount);
          updateCreateCollectionButton(collectionsCount);
          
          console.log('Statistiques mises à jour:', data.stats);
        } else {
          console.error('Erreur lors du recalcul:', data.error);
          // Fallback : recharger la page
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        }
      } catch (error) {
        console.error('Erreur lors du recalcul des statistiques:', error);
        // Fallback : recharger la page
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    }

    // Fonction pour mettre à jour l'affichage des statistiques
    function updateStatsDisplay(stats: any) {
      // Mettre à jour le total des vinyles
      const totalVinylsElement = document.querySelector('[data-stat="total-vinyls"]');
      if (totalVinylsElement) {
        totalVinylsElement.textContent = stats.totalVinyls.toString();
      }

      // Mettre à jour la valeur totale
      const totalValueElement = document.querySelector('[data-stat="total-value"]');
      if (totalValueElement) {
        totalValueElement.textContent = `${stats.totalValue.toFixed(2)} €`;
      }

      // Mettre à jour la valeur moyenne
      const averageValueElement = document.querySelector('[data-stat="average-value"]');
      if (averageValueElement) {
        averageValueElement.textContent = `${stats.averageValue.toFixed(2)} €`;
      }

      // Mettre à jour le nombre de collections
      const totalCollectionsElement = document.querySelector('[data-stat="total-collections"]');
      if (totalCollectionsElement) {
        totalCollectionsElement.textContent = stats.totalCollections.toString();
      }

      // Mettre à jour les genres populaires
      const topGenresContainer = document.querySelector('[data-stat="top-genres"]');
      if (topGenresContainer && stats.topGenres.length > 0) {
        const genresList = stats.topGenres.map((genre: any) => 
          `<div class="flex items-center justify-between">
            <span class="text-sm font-medium text-neutral-900 dark:text-neutral-50">${genre.name}</span>
            <div class="flex items-center">
              <div class="w-20 glass dark:glass-dark rounded-full h-2 mr-3">
                <div class="bg-gradient-emerald h-2 rounded-full" style="width: ${(genre.count / stats.totalVinyls) * 100}%"></div>
              </div>
              <span class="text-sm text-neutral-600 dark:text-neutral-400">${genre.count}</span>
            </div>
          </div>`
        ).join('');
        topGenresContainer.innerHTML = genresList;
      } else if (topGenresContainer) {
        topGenresContainer.innerHTML = '<span class="text-neutral-500 dark:text-neutral-400 text-sm">Aucun genre enregistré</span>';
      }
    }


    // Écouter les événements de recalcul des statistiques
    document.addEventListener('stats:recalculate', recalculateStats);
  });
</script>
