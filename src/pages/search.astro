---
import BaseLayout from '../layouts/BaseLayout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import SearchBar from '../components/SearchBar.astro';
import VinylCard from '../components/VinylCard.astro';
import { AddToCollectionModal } from '../components/collection-modal';
import BarcodeScannerModal from '../components/BarcodeScannerModal.astro';
import { searchVinyl, formatVinylForDisplay } from '../lib/discogs';

const title = "Recherche de vinyles - VinylVault";
const description = "Recherchez dans la base de donn√©es Discogs et d√©couvrez de nouveaux vinyles √† ajouter √† votre collection";

// R√©cup√©rer les param√®tres de recherche
const query = Astro.url.searchParams.get("q") || "";
const page = parseInt(Astro.url.searchParams.get("page") || "1");
const genre = Astro.url.searchParams.get("genre") || "";
const format = Astro.url.searchParams.get("format") || "";
const year = Astro.url.searchParams.get("year") ? parseInt(Astro.url.searchParams.get("year")!) : undefined;

let results: any[] = [];
let pagination: any = null;
let error: string | null = null;
let loading = false;

// Effectuer la recherche si une requ√™te est pr√©sente
if (query) {
  try {
    loading = true;
    
    // Construire l'URL de l'API locale
    const searchParams = new URLSearchParams({
      q: query,
      page: page.toString(),
      per_page: "24",
    });
    
    if (genre) searchParams.append('genre', genre);
    if (format) searchParams.append('format', format);
    if (year) searchParams.append('year', year.toString());
    
    const apiUrl = `${Astro.url.origin}/api/discogs/search?${searchParams.toString()}`;
    
    const response = await fetch(apiUrl);
    const data = await response.json();
    
    if (data.success) {
      results = data.data.results || [];
      pagination = data.data.pagination || null;
    } else {
      error = data.error || "Erreur lors de la recherche";
    }
  } catch (err) {
    error = "Erreur lors de la recherche. Veuillez r√©essayer.";
    console.error('Erreur de recherche:', err);
  } finally {
    loading = false;
  }
}

// Genres et formats disponibles pour les filtres
const availableGenres = [
  'Rock', 'Pop', 'Jazz', 'Classical', 'Hip Hop', 'Electronic',
  'Blues', 'Country', 'Folk', 'Reggae', 'Funk / Soul'
];

const availableFormats = [
  'LP', '12"', '7"', '10"', 'EP', 'Single'
];
---

<BaseLayout title={title} description={description}>
  <Navbar slot="navbar" />
  
  <div class="container mx-auto px-4 py-8">
    <!-- En-t√™te de la page -->
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-neutral-900 dark:text-neutral-50 mb-4">
        üîç Recherche de vinyles
      </h1>
      <p class="text-xl text-neutral-600 dark:text-neutral-400 mb-8">
        Explorez la base de donn√©es Discogs et d√©couvrez de nouveaux vinyles
      </p>
      
      <!-- Barre de recherche principale -->
      <SearchBar 
        initialValue={query} 
        placeholder="Rechercher un artiste, album, titre..."
      />
    </div>

    <!-- Filtres de recherche -->
    <div class="bg-neutral-50 dark:bg-black/20 p-6 rounded-xl border border-neutral-200 dark:border-neutral-700 shadow-sm dark:shadow-white dark:shadow-dark-card mb-8">
      <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-50 mb-4">Filtres</h3>
      
      <form id="filter-form" method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <input type="hidden" name="q" value={query} />
        
        <!-- Genre -->
        <div>
          <label for="genre" class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-1">
            Genre
          </label>
          <select 
            id="genre" 
            name="genre" 
            class="w-full px-3 py-2 border border-neutral-200 dark:border-neutral-700 rounded-xl focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-light-accent1 dark:focus:border-dark-accent1 bg-neutral-50 dark:bg-black/20 text-neutral-900 dark:text-neutral-50"
          >
            <option value="">Tous les genres</option>
            {availableGenres.map(g => (
              <option value={g} selected={genre === g}>{g}</option>
            ))}
          </select>
        </div>

        <!-- Format -->
        <div>
          <label for="format" class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-1">
            Format
          </label>
          <select 
            id="format" 
            name="format"
            class="w-full px-3 py-2 border border-neutral-200 dark:border-neutral-700 rounded-xl focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-light-accent1 dark:focus:border-dark-accent1 bg-neutral-50 dark:bg-black/20 text-neutral-900 dark:text-neutral-50"
          >
            <option value="">Tous les formats</option>
            {availableFormats.map(f => (
              <option value={f} selected={format === f}>{f}</option>
            ))}
          </select>
        </div>

        <!-- Ann√©e -->
        <div>
          <label for="year" class="block text-sm font-medium text-neutral-900 dark:text-neutral-50 mb-1">
            Ann√©e
          </label>
          <input 
            type="number" 
            id="year" 
            name="year" 
            value={year || ""}
            min="1900" 
            max={new Date().getFullYear()}
            placeholder="ex: 1970"
            class="w-full px-3 py-2 border border-neutral-200 dark:border-neutral-700 rounded-xl focus:outline-none focus:ring-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-light-accent1 dark:focus:border-dark-accent1 bg-neutral-50 dark:bg-black/20 text-neutral-900 dark:text-neutral-50 placeholder-light-textSecondary dark:placeholder-dark-textSecondary"
          />
        </div>

        <!-- Bouton de filtrage -->
        <div class="flex items-end">
          <button 
            type="submit"
            class="w-full bg-gradient-emerald dark:bg-gradient-emerald text-white px-4 py-2 rounded-xl hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 transition-colors"
          >
            Appliquer les filtres
          </button>
        </div>
      </form>
    </div>

    <!-- R√©sultats de recherche -->
    {query && (
      <div class="mb-8">
        <div class="flex items-center justify-between mb-6">
          <div>
            <h2 class="text-2xl font-semibold text-neutral-900 dark:text-neutral-50">
              R√©sultats pour "{query}"
            </h2>
            <p class="text-sm text-neutral-600 dark:text-neutral-400 mt-1">
              üéµ Seuls les vinyles (LP, EP, Single) sont affich√©s
            </p>
          </div>
          {pagination && (
            <div class="text-sm text-neutral-600 dark:text-neutral-400">
              {pagination.page} / {pagination.pages} pages 
              ({pagination.items} r√©sultats)
            </div>
          )}
        </div>

        {loading && (
          <div class="text-center py-12">
            <div class="bg-neutral-50 dark:bg-black/20 border border-neutral-200 dark:border-neutral-700 rounded-xl p-8 inline-block">
              <div class="inline-flex items-center">
                <svg class="animate-spin h-8 w-8 text-gradient-emerald dark:text-gradient-emerald mr-3" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-lg text-neutral-900 dark:text-neutral-50 font-medium">Recherche en cours...</span>
              </div>
              <p class="text-sm text-neutral-600 dark:text-neutral-400 mt-2">
                Exploration de la base de donn√©es Discogs
              </p>
            </div>
          </div>
        )}

        {error && (
          <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-600 dark:text-red-400 px-4 py-3 rounded-xl mb-6">
            <p>{error}</p>
          </div>
        )}

        {!loading && !error && results.length === 0 && query && (
          <div class="text-center py-12">
            <div class="text-neutral-600 dark:text-neutral-400 mb-4">
              <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0118 12a8 8 0 01-8 8 8 8 0 01-8-8 8 8 0 018-8 7.962 7.962 0 014.438 1.291"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-neutral-900 dark:text-neutral-50 mb-2">
              Aucun r√©sultat trouv√©
            </h3>
            <p class="text-neutral-600 dark:text-neutral-400">
              Essayez de modifier votre recherche ou d'utiliser des termes diff√©rents.
            </p>
          </div>
        )}

        {!loading && !error && results.length > 0 && (
          <div>
            <!-- Grille des r√©sultats -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
              {results.map(vinyl => (
                <VinylCard 
                  vinyl={vinyl} 
                  showActions={true}
                  isInCollection={false}
                />
              ))}
            </div>

            <!-- Pagination -->
            {pagination && pagination.pages > 1 && (
              <div class="flex justify-center items-center space-x-2">
                <!-- Page pr√©c√©dente -->
                {pagination.page > 1 && (
                  <a 
                    href={`/search?q=${encodeURIComponent(query)}&page=${pagination.page - 1}${genre ? `&genre=${genre}` : ''}${format ? `&format=${format}` : ''}${year ? `&year=${year}` : ''}`}
                    class="px-3 py-2 text-sm font-medium text-neutral-600 dark:text-neutral-400 bg-neutral-50 dark:bg-black/20 border border-neutral-200 dark:border-neutral-700 rounded-xl hover:bg-white dark:hover:bg-neutral-900 hover:border-light-accent1 dark:hover:border-dark-accent1 transition-colors"
                  >
                    Pr√©c√©dent
                  </a>
                )}

                <!-- Num√©ros de page -->
                {Array.from({ length: Math.min(5, pagination.pages) })
                  .map((_, i) => Math.max(1, pagination.page - 2) + i)
                  .filter(pageNum => pageNum <= pagination.pages)
                  .map(pageNum => (
                    <a 
                      href={`/search?q=${encodeURIComponent(query)}&page=${pageNum}${genre ? `&genre=${genre}` : ''}${format ? `&format=${format}` : ''}${year ? `&year=${year}` : ''}`}
                      class={`px-3 py-2 text-sm font-medium rounded-xl border transition-colors ${
                        pageNum === pagination.page 
                          ? 'text-white bg-gradient-emerald dark:bg-gradient-emerald border-light-accent1 dark:border-dark-accent1' 
                          : 'text-neutral-600 dark:text-neutral-400 bg-neutral-50 dark:bg-black/20 border-neutral-200 dark:border-neutral-700 hover:bg-white dark:hover:bg-neutral-900 hover:border-light-accent1 dark:hover:border-dark-accent1'
                      }`}
                    >
                      {pageNum}
                    </a>
                  ))}

                <!-- Page suivante -->
                {pagination.page < pagination.pages && (
                  <a 
                    href={`/search?q=${encodeURIComponent(query)}&page=${pagination.page + 1}${genre ? `&genre=${genre}` : ''}${format ? `&format=${format}` : ''}${year ? `&year=${year}` : ''}`}
                    class="px-3 py-2 text-sm font-medium text-neutral-600 dark:text-neutral-400 bg-neutral-50 dark:bg-black/20 border border-neutral-200 dark:border-neutral-700 rounded-xl hover:bg-white dark:hover:bg-neutral-900 hover:border-light-accent1 dark:hover:border-dark-accent1 transition-colors"
                  >
                    Suivant
                  </a>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    )}

    <!-- Suggestions si pas de recherche -->
    {!query && (
      <div class="text-center py-12">
        <div class="max-w-2xl mx-auto">
          <h2 class="text-2xl font-semibold text-neutral-900 dark:text-neutral-50 mb-4">
            Que souhaitez-vous d√©couvrir aujourd'hui ?
          </h2>
          <p class="text-neutral-600 dark:text-neutral-400 mb-8">
            Utilisez la barre de recherche ci-dessus pour explorer la base de donn√©es Discogs
          </p>
          
          <!-- Recherches populaires -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            {['Pink Floyd', 'The Beatles', 'Miles Davis', 'Led Zeppelin'].map(artist => (
              <a 
                href={`/search?q=${encodeURIComponent(artist)}`}
                class="p-4 bg-neutral-50 dark:bg-black/20 border border-neutral-200 dark:border-neutral-700 rounded-xl hover:bg-white dark:hover:bg-neutral-900 hover:border-light-accent1 dark:hover:border-dark-accent1 transition-colors group"
              >
                <div class="text-sm font-medium text-neutral-900 dark:text-neutral-50 group-hover:text-gradient-emerald dark:group-hover:text-gradient-emerald transition-colors">{artist}</div>
              </a>
            ))}
          </div>

          <!-- Conseils de recherche -->
          <div class="glass-card dark:glass-dark rounded-xl p-6 border border-neutral-200 dark:border-neutral-700">
            <h3 class="text-lg font-semibold text-neutral-900 dark:text-neutral-50 mb-3">
              üí° Conseils de recherche
            </h3>
            <div class="grid md:grid-cols-2 gap-4 text-sm text-neutral-600 dark:text-neutral-400">
              <div>
                <h4 class="font-medium text-neutral-900 dark:text-neutral-50 mb-1">Recherche par artiste</h4>
                <p>Utilisez le nom de l'artiste pour trouver tous ses albums</p>
              </div>
              <div>
                <h4 class="font-medium text-neutral-900 dark:text-neutral-50 mb-1">Recherche par album</h4>
                <p>Tapez le titre de l'album pour des r√©sultats pr√©cis</p>
              </div>
              <div>
                <h4 class="font-medium text-neutral-900 dark:text-neutral-50 mb-1">Utilisez les filtres</h4>
                <p>Affinez votre recherche par genre, format ou ann√©e</p>
              </div>
              <div>
                <h4 class="font-medium text-neutral-900 dark:text-neutral-50 mb-1">Recherche partielle</h4>
                <p>Vous pouvez utiliser des mots-cl√©s partiels</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>

  <Footer slot="footer" />

  <!-- Modals -->
  <BarcodeScannerModal />
  <AddToCollectionModal />
</BaseLayout>

<script>
  // Gestion des filtres en temps r√©el
  document.addEventListener('DOMContentLoaded', () => {
    const filterForm = document.getElementById('filter-form');
    const genreSelect = document.getElementById('genre');
    const formatSelect = document.getElementById('format');
    const yearInput = document.getElementById('year');

    // Auto-submit sur changement de filtre
    [genreSelect, formatSelect].forEach(element => {
      if (element) {
        element.addEventListener('change', () => {
          (filterForm as HTMLFormElement)?.submit();
        });
      }
    });

    // Validation de l'ann√©e
    if (yearInput) {
      yearInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const value = parseInt(target.value);
        const currentYear = new Date().getFullYear();
        
        if (value && (value < 1900 || value > currentYear)) {
          target.setCustomValidity(`L'ann√©e doit √™tre entre 1900 et ${currentYear}`);
        } else {
          target.setCustomValidity('');
        }
      });
    }
  });

  // Gestion des clics sur "Ajouter √† ma collection"
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    
    if (target.dataset.action === 'add-to-collection') {
      e.preventDefault();
      
      // R√©cup√©rer les donn√©es du vinyle depuis les attributs data ou le DOM parent
      const vinylCard = target.closest('.vinyl-card-container');
      if (!vinylCard) return;
      
      // Extraire les donn√©es du vinyle depuis la carte
      const vinylData = extractVinylDataFromCard(vinylCard);
      
      // Ouvrir la modal
      document.dispatchEvent(new CustomEvent('modal:add-to-collection:open', {
        detail: { vinylData }
      }));
    }
  });

  // Fonction pour extraire les donn√©es du vinyle depuis la carte DOM
  function extractVinylDataFromCard(vinylCard: Element) {
    const title = vinylCard.querySelector('[data-vinyl-title]')?.textContent || '';
    const artist = vinylCard.querySelector('[data-vinyl-artist]')?.textContent || '';
    const year = vinylCard.querySelector('[data-vinyl-year]')?.textContent || '';
    const coverImg = vinylCard.querySelector('img') as HTMLImageElement;
    const coverImage = coverImg?.src || '';
    
    // Pour les donn√©es Discogs, on peut les stocker comme attributs data
    const vinylId = vinylCard.querySelector('[data-vinyl-id]')?.getAttribute('data-vinyl-id');
    const discogsId = vinylCard.querySelector('[data-discogs-id]')?.getAttribute('data-discogs-id');
    const discogsUrl = vinylCard.querySelector('[data-discogs-url]')?.getAttribute('data-discogs-url');
    
    return {
      id: vinylId || '',
      discogsId: discogsId || '',
      title: title.trim(),
      artist: artist.trim(),
      year: year ? parseInt(year) : 0,
      coverImage: coverImage,
      discogsUrl: discogsUrl || '',
      // Autres donn√©es peuvent √™tre ajout√©es selon le besoin
    };
  }
</script>

<!-- Modal d'ajout √† la collection -->
<AddToCollectionModal />
