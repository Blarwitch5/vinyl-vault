---
import BaseLayout from '../layouts/BaseLayout.astro'
import Navbar from '../components/Navbar.astro'
import Footer from '../components/Footer.astro'

const title = 'Inscription - VinylVault'
const description = 'Créez votre compte VinylVault et commencez à gérer votre collection de vinyles'
---

<BaseLayout {title} {description}>
  <Navbar slot="navbar" />

  <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <!-- En-tête -->
      <div class="text-center">
        <h2 class="mt-6 text-4xl font-bold text-neutral-900 dark:text-neutral-50">
          Créer votre compte
        </h2>
        <p class="mt-2 text-sm text-neutral-600 dark:text-neutral-400">
          Ou
          <a
            href="/login"
            class="font-medium text-gradient-emerald dark:text-gradient-emerald hover:text-amber-700 dark:hover:text-amber-600"
          >
            connectez-vous à votre compte existant
          </a>
        </p>
      </div>

      <!-- Formulaire d'inscription -->
      <form id="register-form" class="mt-8 space-y-6" action="#" method="POST">
        <div class="space-y-4">
          <div>
            <label
              for="name"
              class="block text-sm font-medium text-neutral-900 dark:text-neutral-50"
            >
              Nom complet (optionnel)
            </label>
            <input
              id="name"
              name="name"
              type="text"
              autocomplete="name"
              class="mt-1 block w-full px-3 py-2 placeholder:text-neutral-600 dark:placeholder:text-neutral-400 text-neutral-900 dark:text-neutral-50 bg-white dark:bg-neutral-950 rounded-xl focus:outline-none focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-gradient-cyan dark:focus:border-gradient-cyan sm:text-sm transition-colors"
              placeholder="Jean Dupont"
            />
          </div>

          <div>
            <label
              for="email"
              class="block text-sm font-medium text-neutral-900 dark:text-neutral-50"
            >
              Adresse email *
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autocomplete="email"
              required
              class="mt-1 block w-full px-3 py-2 placeholder:text-neutral-600 dark:placeholder:text-neutral-400 text-neutral-900 dark:text-neutral-50 bg-white dark:bg-neutral-950 rounded-xl focus:outline-none focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-gradient-cyan dark:focus:border-gradient-cyan sm:text-sm transition-colors"
              placeholder="jean@example.com"
            />
          </div>

          <div>
            <label
              for="password"
              class="block text-sm font-medium text-neutral-900 dark:text-neutral-50"
            >
              Mot de passe *
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autocomplete="new-password"
              required
              class="mt-1 block w-full px-3 py-2 placeholder:text-neutral-600 dark:placeholder:text-neutral-400 text-neutral-900 dark:text-neutral-50 bg-white dark:bg-neutral-950 rounded-xl focus:outline-none focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-gradient-cyan dark:focus:border-gradient-cyan sm:text-sm transition-colors"
              placeholder="Minimum 8 caractères"
            />
            <div class="mt-1 text-xs text-neutral-600 dark:text-neutral-400">
              Le mot de passe doit contenir au moins 8 caractères
            </div>
          </div>

          <div>
            <label
              for="confirm-password"
              class="block text-sm font-medium text-neutral-900 dark:text-neutral-50"
            >
              Confirmer le mot de passe *
            </label>
            <input
              id="confirm-password"
              name="confirm-password"
              type="password"
              autocomplete="new-password"
              required
              class="mt-1 block w-full px-3 py-2 placeholder:text-neutral-600 dark:placeholder:text-neutral-400 text-neutral-900 dark:text-neutral-50 bg-white dark:bg-neutral-950 rounded-xl focus:outline-none focus:ring-light-accent1 dark:focus:ring-dark-accent1 focus:border-gradient-cyan dark:focus:border-gradient-cyan sm:text-sm transition-colors"
              placeholder="Confirmez votre mot de passe"
            />
          </div>
        </div>

        <!-- Acceptation des conditions -->
        <div class="flex items-start">
          <div class="flex items-center h-5">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              required
              class="h-4 w-4 text-gradient-emerald dark:text-gradient-emerald focus:ring-light-accent1 dark:focus:ring-dark-accent1 border-neutral-200 dark:border-white/10 bg-white dark:bg-neutral-950 rounded transition-colors"
            />
          </div>
          <div class="ml-3 text-sm">
            <label for="agree-terms" class="text-neutral-900 dark:text-neutral-50">
              J'accepte les
              <a
                href="/terms"
                class="font-medium text-gradient-emerald dark:text-gradient-emerald hover:text-gradient-emerald/80 dark:hover:text-gradient-emerald/80 transition-colors"
              >
                conditions d'utilisation
              </a>
              et la
              <a
                href="/privacy"
                class="font-medium text-gradient-emerald dark:text-gradient-emerald hover:text-gradient-emerald/80 dark:hover:text-gradient-emerald/80 transition-colors"
              >
                politique de confidentialité
              </a>
            </label>
          </div>
        </div>

        <!-- Messages d'erreur/succès -->
        <div id="message" class="hidden">
          <div
            id="error-message"
            class="hidden bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-600 dark:text-red-400 px-4 py-3 rounded-xl"
          >
            <p class="text-sm"></p>
          </div>
          <div
            id="success-message"
            class="hidden bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 text-emerald-600 dark:text-gradient-emerald px-4 py-3 rounded-xl"
          >
            <p class="text-sm"></p>
          </div>
        </div>

        <!-- Indicateur de force du mot de passe -->
        <div id="password-strength" class="hidden">
          <div class="text-xs text-neutral-600 mb-1">Force du mot de passe:</div>
          <div class="flex space-x-1">
            <div class="h-2 w-1/4 rounded-full glass-card dark:glass-dark" data-strength="1"></div>
            <div class="h-2 w-1/4 rounded-full glass-card dark:glass-dark" data-strength="2"></div>
            <div class="h-2 w-1/4 rounded-full glass-card dark:glass-dark" data-strength="3"></div>
            <div class="h-2 w-1/4 rounded-full glass-card dark:glass-dark" data-strength="4"></div>
          </div>
          <div id="strength-text" class="text-xs text-neutral-600 dark:text-neutral-400 mt-1"></div>
        </div>

        <!-- Bouton de soumission -->
        <div>
          <button
            type="submit"
            id="submit-btn"
            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-emerald dark:bg-gradient-emerald hover:bg-gradient-emerald/80 dark:hover:bg-gradient-emerald/80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-light-accent1 dark:focus:ring-dark-accent1 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <span class="absolute left-0 inset-y-0 flex items-center pl-3">
              <svg
                class="h-5 w-5 text-white/80 group-hover:text-white"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                  clip-rule="evenodd"></path>
              </svg>
            </span>
            <span id="btn-text">Créer mon compte</span>
            <span id="btn-loading" class="hidden">
              <svg class="animate-spin h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </span>
          </button>
        </div>
      </form>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<script>
  import { isValidEmail, isValidPassword, register } from '../lib/auth'

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('register-form') as HTMLFormElement
    const nameInput = document.getElementById('name') as HTMLInputElement
    const emailInput = document.getElementById('email') as HTMLInputElement
    const passwordInput = document.getElementById('password') as HTMLInputElement
    const confirmPasswordInput = document.getElementById('confirm-password') as HTMLInputElement
    const agreeTermsInput = document.getElementById('agree-terms') as HTMLInputElement
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement
    const btnText = document.getElementById('btn-text') as HTMLSpanElement
    const btnLoading = document.getElementById('btn-loading') as HTMLSpanElement
    const errorMessage = document.getElementById('error-message') as HTMLDivElement
    const successMessage = document.getElementById('success-message') as HTMLDivElement
    const passwordStrength = document.getElementById('password-strength') as HTMLDivElement
    const strengthText = document.getElementById('strength-text') as HTMLDivElement

    // Validation de la force du mot de passe
    passwordInput.addEventListener('input', () => {
      const password = passwordInput.value

      if (password.length > 0) {
        passwordStrength.classList.remove('hidden')
        updatePasswordStrength(password)
      } else {
        passwordStrength.classList.add('hidden')
      }
    })

    // Validation de la confirmation du mot de passe
    confirmPasswordInput.addEventListener('blur', () => {
      if (confirmPasswordInput.value && confirmPasswordInput.value !== passwordInput.value) {
        confirmPasswordInput.classList.add('border-red-500')
      } else {
        confirmPasswordInput.classList.remove('border-red-500')
      }
    })

    // Gestion de la soumission du formulaire
    form.addEventListener('submit', async (e) => {
      e.preventDefault()

      const name = nameInput.value.trim()
      const email = emailInput.value.trim()
      const password = passwordInput.value
      const confirmPassword = confirmPasswordInput.value
      const agreeTerms = agreeTermsInput.checked

      // Validation côté client
      if (!isValidEmail(email)) {
        showError('Veuillez saisir une adresse email valide.')
        return
      }

      if (!isValidPassword(password)) {
        showError('Le mot de passe doit contenir au moins 8 caractères.')
        return
      }

      if (password !== confirmPassword) {
        showError('Les mots de passe ne correspondent pas.')
        return
      }

      if (!agreeTerms) {
        showError("Vous devez accepter les conditions d'utilisation.")
        return
      }

      // Affichage du loading
      setLoading(true)
      hideMessages()

      try {
        const result = await register({
          email,
          password,
          name: name || undefined,
        })

        if (result.success) {
          showSuccess('Compte créé avec succès ! Redirection en cours...')

          // Redirection après succès
          setTimeout(() => {
            window.location.href = '/dashboard'
          }, 1500)
        } else {
          showError(result.error || 'Erreur lors de la création du compte')
        }
      } catch (error) {
        console.error("Erreur d'inscription:", error)
        showError('Une erreur inattendue est survenue. Veuillez réessayer.')
      } finally {
        setLoading(false)
      }
    })

    // Validation en temps réel
    emailInput.addEventListener('blur', () => {
      if (emailInput.value && !isValidEmail(emailInput.value)) {
        emailInput.classList.add('border-red-500')
      } else {
        emailInput.classList.remove('border-red-500')
      }
    })

    passwordInput.addEventListener('blur', () => {
      if (passwordInput.value && !isValidPassword(passwordInput.value)) {
        passwordInput.classList.add('border-red-500')
      } else {
        passwordInput.classList.remove('border-red-500')
      }
    })

    // Fonctions utilitaires
    function setLoading(loading: boolean) {
      submitBtn.disabled = loading
      btnText.classList.toggle('hidden', loading)
      btnLoading.classList.toggle('hidden', !loading)
    }

    function showError(message: string) {
      const messageEl = errorMessage.querySelector('p')
      if (messageEl) {
        messageEl.textContent = message
      }
      errorMessage.classList.remove('hidden')
      successMessage.classList.add('hidden')
      document.getElementById('message')?.classList.remove('hidden')
    }

    function showSuccess(message: string) {
      const messageEl = successMessage.querySelector('p')
      if (messageEl) {
        messageEl.textContent = message
      }
      successMessage.classList.remove('hidden')
      errorMessage.classList.add('hidden')
      document.getElementById('message')?.classList.remove('hidden')
    }

    function hideMessages() {
      errorMessage.classList.add('hidden')
      successMessage.classList.add('hidden')
      document.getElementById('message')?.classList.add('hidden')
    }

    function updatePasswordStrength(password: string) {
      let score = 0
      let feedback = ''

      // Critères de force
      if (password.length >= 8) score++
      if (password.match(/[a-z]/)) score++
      if (password.match(/[A-Z]/)) score++
      if (password.match(/[0-9]/)) score++
      if (password.match(/[^a-zA-Z0-9]/)) score++

      // Réinitialiser les barres
      const bars = passwordStrength.querySelectorAll('[data-strength]')
      bars.forEach((bar) => {
        bar.classList.remove('bg-red-500', 'bg-yellow-500', 'bg-blue-500', 'bg-green-500')
        bar.classList.add('bg-white')
      })

      // Colorer selon le score
      let color = 'bg-white'
      if (score <= 2) {
        feedback = 'Faible'
        color = 'bg-red-500'
      } else if (score === 3) {
        feedback = 'Moyen'
        color = 'bg-yellow-500'
      } else if (score === 4) {
        feedback = 'Bon'
        color = 'bg-blue-500'
      } else {
        feedback = 'Excellent'
        color = 'bg-green-500'
      }

      // Appliquer la couleur aux barres actives
      for (let i = 0; i < Math.min(score, 4); i++) {
        const bar = bars[i]
        if (bar) {
          bar.classList.remove('bg-white')
          bar.classList.add(color)
        }
      }

      strengthText.textContent = feedback
    }
  })
</script>
